<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DavidWang&#39;s Blog</title>
    <description>爱唱歌健身的程序员 | 王伟达，Web &amp; algorithm Lover，Server Enginee | 这里是 @王伟达 的个人博客，期待和你一起学习成长。</description>
    <link>http://DavidWangTM.github.io/</link>
    <atom:link href="http://DavidWangTM.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 20 Jun 2016 22:43:26 +0800</pubDate>
    <lastBuildDate>Mon, 20 Jun 2016 22:43:26 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>IOS 开源库讲解篇一</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;iOS开发中，不管是哪种设计模式，Model层都是不可或缺的。而Model层的第三方库常用的库有以下几个&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JSONModel&lt;/li&gt;
  &lt;li&gt;Mantle&lt;/li&gt;
  &lt;li&gt;MJExtension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSON data到对象的转换原理都差不多，一般的顺序如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据Runtime，动态的获取属性的类型和属性的名字，（如果需要，做一次Json的key的Mapping&lt;/li&gt;
  &lt;li&gt;创建对应的对象实例&lt;/li&gt;
  &lt;li&gt;根据KVC（NSKeyValueCoding协议）来为属性设置值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mantle就是这样的一个库，个人比较喜欢Mantle,而且在Github的Star也是提到的几个库中最多的。Mantle除了提供JSON和对象的相互转化，继承自MTLModel的对象还自动实现了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCoding&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isEqual&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;正文开始啦&lt;/h3&gt;

&lt;p&gt;如果要理解JSON到Model转化的原理，需要理解&lt;code class=&quot;highlighter-rouge&quot;&gt;Runtime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;下面说下&lt;code class=&quot;highlighter-rouge&quot;&gt;Runtime&lt;/code&gt;的几个基础知识,以及Mantle本身&lt;/p&gt;

&lt;h4 id=&quot;runtime&quot;&gt;Runtime动态获取类的属性&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-object-c&quot;&gt;@interface Base : NSObject

@property (copy,nonatomic) NSString * basemodel;

@end

@interface Demo : Base

@property (nonatomic,copy) NSString * name;
@property (nonatomic,strong) NSDate * createAt;
@property (nonatomic,assign) CGFloat num;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后, 写一个方法来Log Model&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)logAllModel{
    uint count;
    objc_property_t * models = class_copyPropertyList(Demo.class,&amp;amp;count);
    @try {
        for (int i = 0; i &amp;lt; count ; i++) {
            objc_property_t  model = propertys[i];
            NSLog(@&quot;%@&quot;,@(property_getName(model)));
        }
    }@finally {
        free(models);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;打印出来是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-06-20 22:05:25.773 TestModel[3276:203701] name
2016-06-20 22:05:25.773 TestModel[3276:203701] createAt
2016-06-20 22:05:25.773 TestModel[3276:203701] num
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不难发现&lt;code class=&quot;highlighter-rouge&quot;&gt;class_copyPropertyList&lt;/code&gt;仅仅是获取了当前类的属性列表，并没有获取基类的属性对象。所以对上述方法进行修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)logAllModel{
    Class cls = Demo.class;
    while (![cls isEqual:NSObject.class]) {
        uint count;
        objc_property_t * models;
        @try {
            models = class_copyPropertyList(cls,&amp;amp;count);
            cls = cls.superclass;
            for (int i = 0; i &amp;lt; count ; i++) {
                objc_property_t  model = models[i];
                NSLog(@&quot;%@&quot;,@(property_getName(model)));
            }
        }@finally {
            free(models);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class_copyPropertyList&lt;/code&gt;返回一个数组，这个数字必须要手动释放，所以用&lt;code class=&quot;highlighter-rouge&quot;&gt;Try-Catch-Finally&lt;/code&gt;包裹起来。&lt;/p&gt;

&lt;h4 id=&quot;runtimeattributes&quot;&gt;Runtime来获取属性的attributes&lt;/h4&gt;

&lt;p&gt;关键方法property_getAttributes，返回个一个C类型的字符串。&lt;/p&gt;

&lt;p&gt;我们先声明一个这样的属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，打印出它的attributes信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSLog(@&quot;%@&quot;,@(property_getAttributes(class_getProperty(self.class,@&quot;name&quot;.UTF8String))));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以看到Log是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-06-20 22:07:25.723 TestModel[3276:203701] T@,R,C,N,V_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里的Attributes字符串是编码后的字符串，分为三个部分&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T@,T&lt;/code&gt;表示开头，后面跟着属性的类型，&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;类型.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vname，V&lt;/code&gt;表示中间部分的结束，后面跟&lt;code class=&quot;highlighter-rouge&quot;&gt;ivar&lt;/code&gt;名字,自动合成呢的情况下前面加下划线.&lt;/li&gt;
  &lt;li&gt;中间R,C,N用逗号隔开，表示属性的描述，&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;Copy&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;Nonatomic&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mantle&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveCocoa&lt;/code&gt;都是采用了&lt;a href=&quot;https://github.com/Mantle/Mantle/tree/master/Mantle/extobjc&quot;&gt;extobjc&lt;/a&gt;这个OC的Runtime工具类将属性的详细信息提取到一个结构体里的，原理都是一样的。提取完成的结构体是&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/extobjc/EXTRuntimeExtensions.h&quot;&gt;mtl_propertyAttributes&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;matnle&quot;&gt;Matnle的类的组织架构&lt;/h4&gt;

&lt;p&gt;按照文件的方式，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/MTLJSONAdapter.h&quot;&gt;MTLJSONAdapter.h&lt;/a&gt;,定义了协议&lt;code class=&quot;highlighter-rouge&quot;&gt;MTLJSONSerializing&lt;/code&gt;和适配器类&lt;code class=&quot;highlighter-rouge&quot;&gt;MTLJSONAdapter&lt;/code&gt;,这两个协议/类定义了接口来实现&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON-MTLModel&lt;/code&gt;的转换。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/MTLModel.h&quot;&gt;MTLModel.h&lt;/a&gt;，定义了协议MTLModel和基类MTLModel，基类MTLModel实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;isEqual,NSCopying&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;几个方法。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/MTLModel%2BNSCoding.h&quot;&gt;MTLModel+NSCoding.h&lt;/a&gt;,MTLModel的类别，让其支持NSCoding协议&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/MTLValueTransformer.h&quot;&gt;MTLValueTransformer.h&lt;/a&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NSValueTransformer&lt;/code&gt;的子类，定义了将一个value转变成另一个value的接口。例如，返回的一个&lt;code class=&quot;highlighter-rouge&quot;&gt;2020-01-01T15:33:30&lt;/code&gt;字符串，利用转换block转换成&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;其它的都是工具类，提供工具方法，不全列出来了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;json-&quot;&gt;JSON-&amp;gt;对象的处理过程&lt;/h4&gt;

&lt;p&gt;以下面代码调用为例（为了看起来不那么臃肿，省略不必要的代码）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Demo * demo = [MTLJSONAdapter modelOfClass:[Demo class] fromJSONDictionary:json error:&amp;amp;error];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看看这个方法的具体实现，就知道分为两个大的过程&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (id)modelOfClass:(Class)modelClass fromJSONDictionary:(NSDictionary *)JSONDictionary error:(NSError **)error {
    //1.根据modelClass初始化一个adapter
    MTLJSONAdapter *adapter = [[self alloc] initWithModelClass:modelClass];
    //2.adapter解析实际的JSON数据
    return [adapter modelFromJSONDictionary:JSONDictionary error:error];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在看看整个第一大步，&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/MTLJSONAdapter.m&quot;&gt;initWithModelClass&lt;/a&gt;，Mantle做了什么，&lt;/p&gt;

&lt;h5 id=&quot;modelclass&quot;&gt;1.1，断言检查，并保存modelClass&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSParameterAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSParameterAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;conformsToProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MTLJSONSerializing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_modelClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;mtljsonserialingjsonkeypathsbypropertykey-json-key&quot;&gt;1.2,获取所有的属性名字，获取MTLJSONSerialing中JSONKeyPathsByPropertyKey方法提供的属性名字-&amp;gt;JSON key的映射，并进行合法性检查&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //属性名－&amp;gt;JSON key的映射
    JSONKeyPathsByPropertyKey = [modelClass JSONKeyPathsByPropertyKey];
    //所有的属性集合
    NSSet *propertyKeys = [self.modelClass propertyKeys];
    //每一个属性进行检查
    for (NSString *mappedPropertyKey in _JSONKeyPathsByPropertyKey) {
        //检查属性名－&amp;gt;JSON Key映射的属性名是否合法
        if (![propertyKeys containsObject:mappedPropertyKey]) {
            NSAssert(NO, @&quot;%@ is not a property of %@.&quot;, mappedPropertyKey, modelClass);
            return nil;
        }
        //获取对应的JSON key
        id value = _JSONKeyPathsByPropertyKey[mappedPropertyKey];
        //如果是Array（支持JSON key是Array）
        if ([value isKindOfClass:NSArray.class]) {
            //Array中的每一个Key必须是String类型
            for (NSString *keyPath in value) {
                if ([keyPath isKindOfClass:NSString.class]) continue;

                NSAssert(NO, @&quot;%@ must either map to a JSON key path or a JSON array of key paths, got: %@.&quot;, mappedPropertyKey, value);
                return nil;
            }
        } else if (![value isKindOfClass:NSString.class]) {
            //检查JSON key是否时Array类型
            NSAssert(NO, @&quot;%@ must either map to a JSON key path or a JSON array of key paths, got: %@.&quot;,mappedPropertyKey, value);
            return nil;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;nsvaluetransformerjson2015-10-01t131515nsdate&quot;&gt;1.3 获取所有的NSValueTransformer,来方便做值转换（例如：服务器JSON返回的是2015-10-01T13:15:15,转换成NSDate）&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_valueTransformersByPropertyKey = [self.class valueTransformersForModelClass:modelClass];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;用过Mantle的都知道，mantle利用”属性名+JSONTransformer”的方法名字来提供NSValueTransformer, 
这里Mantle用了一些Runtime稍微高级点的东西，所以这个方法我会详细讲解&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valueTransformersForModelClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;modelClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;propertyKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//对每一个key检查NSValueTransformer
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//根据属性名字＋JSONTransformer来合成一个Selector
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MTLSelectorWithKeyPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JSONTransformer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//如果提供了Transformer方法
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//获取IMP指针，也就是实际方法的执行体
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;IMP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;methodForSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//OC方法转换为C方法的时候，前两个参数是_cmd,和SEL，所以，这里做一个强制转化，方便下一行执行
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;NSValueTransformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__typeof__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//获取transformer，保存到Dictionary
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;NSValueTransformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//检查是否通过协议方法JSONTransformerForKey来提供NSValueTransformer
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;JSONTransformerForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//把一个属性的类型，关键字，属性名字提取到一个结构体中
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;objc_property_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_getProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mtl_propertyAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtl_copyPropertyAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@onExit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSValueTransformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//如果某一个属性是id类型
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//获得该属性的实际类名
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//获取该类名型提供的NSValueTransformer,即类是否提供了keyJSONTransformer方法
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transformerForModelPropertiesOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//如果该类型也是一个MTLModel，并且实现了MTLJSONSerializing，获取该对象的NSValueTransformer,也就是保证了在MTLModel的一个属性也是一个MTLModel的时候能够正常工作
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertyClass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;conformsToProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MTLJSONSerializing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dictionaryTransformerWithModelClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//如果仍然没有获取到transformer，验证对于modalClass是否可转换
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSValueTransformer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mtl_validatingTransformerForClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//不是ID类型，则是值类型的transformer
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transformerForModelPropertiesOfObjCType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSValueTransformer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mtl_validatingTransformerForClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再看看第二大步，Adapter如何解析JSON 
即这个方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (id)modelFromJSONDictionary:(NSDictionary *)JSONDictionary error:(NSError **)error {
//...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;jsonjson&quot;&gt;2.1，检查是否实现了聚类方式解析JSON，例如解析这样的JSON&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
    {
        &quot;key1&quot;:&quot;value1&quot;,
        &quot;key2&quot;:&quot;value2&quot;
    },
    {
        &quot;key3&quot;:&quot;value3&quot;,
        &quot;key4&quot;:&quot;value4&quot;

    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对应代码块&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if ([self.modelClass respondsToSelector:@selector(classForParsingJSONDictionary:)]) {
        //...
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;propertypropertykeyjson-keyjson-key-mtlvalueforjsonkeypathsuccesserrorhttpsgithubcommantlemantleblobmastermantlensdictionary2bmtljsonkeypathm&quot;&gt;2.2，对于每一个Property的名字，即propertyKey，获取对应的JSON key。根据JSON key 来获取对应的值，主要掉用&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/NSDictionary%2BMTLJSONKeyPath.m&quot;&gt;mtl_valueForJSONKeyPath:success:error:&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;这个方法很简单，比如对应json的keyPath是person.name.first 
先分解成person,name,first,然后一层一层的获取json[person][name][first],只不过Mantle在解析的时候，用了个for循环，来给用户反馈，到底错误在哪里。个人感觉用以下两个KVC的方法更简洁一点&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//验证是否可用KVC
- validateValue:forKeyPath:error:
//用KVC来获取值
- valueForKeyPath:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;nsvaluetransformernsvaluetransformer&quot;&gt;2.3，对于2.2种，获取到的值，利用1.3的NSValueTransformer进行转换，这里只知道NSValueTransformer能够把一个值转换成另一个值就行了，后面会详细讲解如何转换的。&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Tips: 
这里要提到的是，Mantle采用了条件编译方式来处理异常，即debug模式下会抛出异常给开发者，但是release模式下，不会崩溃&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#if DEBUG
    @throw ex;
#else
    //...           
#endif

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;keykvckvc&quot;&gt;2.4 根据以上三步得到的值字典，对每一个key利用KVC进行设置值，KVC设置值之前，调用&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[obj validateValue:&amp;amp;validatedValue forKey:key error:error]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;来验证是否可以KVC&lt;/p&gt;

&lt;h4 id=&quot;nsvaluetransformer&quot;&gt;NSValueTransformer&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSValueTransformer_Class/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSValueTranformer是一个抽象的基类，利用Cocoa Bindings技术来进行值的相互转换
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;既然是一个抽象基类，那么使用的时候要继承这个基类，然后实现必要的方法，从而才能进行相应的值转换。&lt;/p&gt;

&lt;p&gt;例如,实现一个简单的NSDate&amp;lt;-&amp;gt;NSString转换的Transformer&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LHValueTransformer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSValueTransformer&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LHValueTransformer&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowsReverseTransformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transformedValueClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDateFormatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSDateFormatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDateFormatter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transformedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;Should a NSDate value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dateFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringFromDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverseTransformedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;Should be a NSString value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dateFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dateFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，这样掉用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSValueTransformer * trans = [[LHValueTransformer alloc] init];

    NSDate * date = [NSDate date];
    NSString * str = [trans transformedValue:date];
    NSDate * date2 = [trans reverseTransformedValue:str];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;MTLValueTransformer就是这样的一个子类，只不过它提供了正反两个转换的block作为接口。&lt;/p&gt;

&lt;h4 id=&quot;isequalnscopyinghash&quot;&gt;isEqual，NSCopying，hash&lt;/h4&gt;

&lt;p&gt;实现NSCopying和hash很简单，就是基类根据Runtime动态的获取所有的属性，然后对应的进行操作就可以了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark NSCopying

- (instancetype)copyWithZone:(NSZone *)zone {
    MTLModel *copy = [[self.class allocWithZone:zone] init];
    [copy setValuesForKeysWithDictionary:self.dictionaryValue];
    return copy;
}

#pragma mark NSObject

- (NSString *)description {
    NSDictionary *permanentProperties = [self dictionaryWithValuesForKeys:self.class.permanentPropertyKeys.allObjects];

    return [NSString stringWithFormat:@&quot;&amp;lt;%@: %p&amp;gt; %@&quot;, self.class, self, permanentProperties];
}

- (NSUInteger)hash {
    NSUInteger value = 0;
    //每个value取hash值
    for (NSString *key in self.class.permanentPropertyKeys) {
        value ^= [[self valueForKey:key] hash];
    }

    return value;
}

- (BOOL)isEqual:(MTLModel *)model {
    if (self == model) return YES;
    if (![model isMemberOfClass:self.class]) return NO;

    for (NSString *key in self.class.permanentPropertyKeys) {
        id selfValue = [self valueForKey:key];
        id modelValue = [model valueForKey:key];
        //每一个value取isEqual
        BOOL valuesEqual = ((selfValue == nil &amp;amp;&amp;amp; modelValue == nil) || [selfValue isEqual:modelValue]);
        if (!valuesEqual) return NO;
    }

    return YES;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;nscoding&quot;&gt;NSCoding&lt;/h4&gt;

&lt;p&gt;NSCoding的支持有些复杂，源代码&lt;a href=&quot;https://github.com/Mantle/Mantle/blob/master/Mantle/MTLModel%2BNSCoding.m&quot;&gt;MTLModel+NSCoding.m&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;initWithCoder:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据Runtime，获取所有的属性名字.&lt;/li&gt;
  &lt;li&gt;对于每一个属性，检查是否响应&lt;code class=&quot;highlighter-rouge&quot;&gt;decodeWithCoder:modelVersion:&lt;/code&gt;,也就是说，支持属性也是MTLModel对象，如果是，则调用&lt;code class=&quot;highlighter-rouge&quot;&gt;decodeWithCoder:modelVersion:&lt;/code&gt;解析这个MTLModel&lt;/li&gt;
  &lt;li&gt;如果不是MTLModel子类，则调用&lt;code class=&quot;highlighter-rouge&quot;&gt;decodeObjectForKey&lt;/code&gt;来解析，这里的key就是属性的名字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;encodeWithCoder类似，不做讲解&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;异常处理&lt;/h4&gt;

&lt;p&gt;Mantle中，有一些&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@try{}
@catch{}
@finally{}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;并且在catch模块中&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#if DEBUG
    @throw ex;
#else
    //其它处理
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样能够方便调试错误，并且在运行时的时候不崩溃。&lt;/p&gt;

&lt;p&gt;同时，你还能看到这样的代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mtl_propertyAttributes *attributes = mtl_copyPropertyAttributes(property);
@onExit {
    free(attributes);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;@onExit&lt;/code&gt;是一个宏定义，保证代码在在当前域返回（return，break，异常）始终能执行到。其实本质就是把代码放到了finally里&lt;/p&gt;

&lt;h4 id=&quot;attribute&quot;&gt;&lt;strong&gt;attribute&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;__attribute__机制能够为方法，变量，类型增加额外的属性。&lt;/p&gt;

&lt;p&gt;**增加的额外属性，能够让编译器进行额外的检查，从而提供额外的提示 **&lt;/p&gt;

&lt;p&gt;比如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MTLJSONSerializing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unavailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Replaced by -modelFromJSONDictionary:error:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;JSONArrayFromModels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deprecated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Replaced by +JSONArrayFromModels:error:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Replaced by +JSONArrayFromModels:error:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就分别提示model当前不可用unavailable，和&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONArrayFromModels&lt;/code&gt;方法被&lt;code class=&quot;highlighter-rouge&quot;&gt;deprecated&lt;/code&gt;。&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Jun 2016 17:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/20/ios_mantle_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/20/ios_mantle_introduction/</guid>
        
        <category>ios</category>
        
        <category>Xcode</category>
        
        <category>Mantle</category>
        
        
      </item>
    
      <item>
        <title>Android 快速开发库</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;1. 缓存&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/JakeWharton/DiskLruCache&quot;&gt;DiskLruCache&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Java实现基于LRU的磁盘缓存&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.图片加载&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Android Universal Image Loader&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个强大的加载，缓存，展示图片的库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/square/picasso&quot;&gt;Picasso&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个强大的图片下载与缓存的库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;Fresco&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个用于管理图像和他们使用的内存的库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;Glide&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个图片加载和缓存的库&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3. 图片处理&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/wasabeef/picasso-transformations&quot;&gt;Picasso-transformations&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个为Picasso提供多种图片变换的库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/wasabeef/glide-transformations&quot;&gt;Glide-transformations&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个为Glide提供多种图片变换的库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/CyberAgent/android-gpuimage&quot;&gt;Android-gpuimage&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;基于OpenGL的Android过滤器&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-3&quot;&gt;4. 网络请求&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/loopj/android-async-http&quot;&gt;Android Async HTTP&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Android异步HTTP库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/koush/AndroidAsync&quot;&gt;AndroidAsync&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/square/okhttp&quot;&gt;OkHttp&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个Http与Http/2的客户端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/square/retrofit&quot;&gt;Retrofit&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;类型安全的Http客户端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/volley&quot;&gt;Volley&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Google推出的Android异步网络请求框架和图片加载框架&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-4&quot;&gt;5. 网络解析&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Gson	&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个Java序列化/反序列化库，可以将JSON和java对象互相转换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/codehaus/jackson&quot;&gt;Jackson&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/alibaba/fastjson&quot;&gt;Fastjson&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Java上一个快速的JSON解析器/生成器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://sourceforge.net/projects/htmlparser/&quot;&gt;HtmlPaser&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一种用来解析单个独立html或嵌套html的方式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/jhy/jsoup&quot;&gt;Jsoup&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个以最好的DOM，CSS和jQuery解析html的库&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-5&quot;&gt;6. 数据库&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://sourceforge.net/projects/ormlite/files/releases/com/j256/ormlite/&quot;&gt;OrmLite&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;JDBC和Android的轻量级ORM java包&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/satyan/sugar&quot;&gt;Sugar&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;用超级简单的方法处理Android数据库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/greenrobot/greenDAO&quot;&gt;GreenDAO&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一种轻快地将对象映射到SQLite数据库的ORM解决方案&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/pardom/ActiveAndroid&quot;&gt;ActiveAndroid&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;以活动记录方式为Android SQLite提供持久化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/square/sqlbrite&quot;&gt;SQLBrite&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;SQLiteOpenHelper 和ContentResolver的轻量级包装&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/jhy/jsoup&quot;&gt;Realm&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;移动数据库：一个SQLite和ORM的替换品&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-6&quot;&gt;7. 依赖注入&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot;&gt;ButterKnife&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;将Android视图和回调方法绑定到字段和方法上&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/google/dagger&quot;&gt;Dagger2&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个Android和java快速依赖注射器。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/excilys/androidannotations&quot;&gt;AndroidAnotations&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;快速安卓开发。易于维护&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/roboguice/roboguice&quot;&gt;RoboGuice&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Android平台的Google Guice&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-7&quot;&gt;8. 图表&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/diogobernardino/WilliamChart&quot;&gt;WilliamChart&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;创建图表的Android库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/lecho/hellocharts-android&quot;&gt;HelloCharts&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;兼容到API8的Android图表库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart&quot;&gt;MPAndroidChart&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个强大的Android图表视图/图形库&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-8&quot;&gt;9. 后台处理&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/square/tape&quot;&gt;Tape&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个轻快的，事务性的，基于文件的FIFO的库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/yigit/android-priority-jobqueue&quot;&gt;Android Priority Job Queue&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个专门为Android轻松调度任务的工作队列&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-9&quot;&gt;10. 事件总线&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/greenrobot/EventBus&quot;&gt;EventBus&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;安卓优化的事件总线，简化了活动、片段、线程、服务等的通信&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/square/otto&quot;&gt;Otto&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个基于Guava的增强的事件总线&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-10&quot;&gt;11. 响应式编程&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;RxJava&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;JVM上的响应式扩展&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJavaJoins&quot;&gt;RxJavaJoins&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;为RxJava提供Joins操作&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxAndroid&quot;&gt;RxAndroid&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Android上的响应式扩展，在RxJava基础上添加了Android线程调度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/JakeWharton/RxBinding&quot;&gt;RxBinding&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;提供用RxJava绑定Android UI的API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/google/agera&quot;&gt;Agera&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Android上的响应式编程&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;log&quot;&gt;12. Log框架&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/orhanobut/logger&quot;&gt;Logger&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;简单，漂亮，强大的Android日志工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/JakeWharton/hugo&quot;&gt;Hugo&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;在调试版本上注解的触发方法进行日志记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/JakeWharton/timber&quot;&gt;Timber&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;一个小的，可扩展的日志工具&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-11&quot;&gt;13. 测试框架&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mockito/mockito&quot;&gt;Mockito&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Java编写的Mocking单元测试框架&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/RobotiumTech/robotium&quot;&gt;Robotium&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Android UI 测试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/xtremelabs/robolectric&quot;&gt;Robolectric&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Android单元测试框架&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Android自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;14. 调试框架&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/facebook/stetho&quot;&gt;Stetho&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-13&quot;&gt;15. 性能优化&lt;/h3&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/square/leakcanary&quot;&gt;LeakCanary&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;内存泄漏检测工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ACRA/acra&quot;&gt;ACRA&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Android应用程序崩溃报告&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 17 Jun 2016 17:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/17/android_frame_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/17/android_frame_introduction/</guid>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>ios 进阶篇</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;概念&lt;/h3&gt;

&lt;p&gt;对象拷贝有两种方式：浅复制和深复制。顾名思义，浅复制，并不拷贝对象本身，仅仅是拷贝指向对象的指针；深复制是直接拷贝整个对象内存到另一块内存中。&lt;/p&gt;

&lt;p&gt;一图以蔽之&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/ios_introduction/ios_image_note50592_1.png&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再简单些说：&lt;strong&gt;浅复制就是指针拷贝；深复制就是内容拷贝&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;shallow-copy&quot;&gt;集合的浅复制 (shallow copy)&lt;/h3&gt;

&lt;p&gt;集合的浅复制有非常多种方法。当你进行浅复制时，会向原始的集合发送retain消息，引用计数加1，同时指针被拷贝到新的集合。&lt;/p&gt;

&lt;p&gt;现在让我们看一些浅复制的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray *shallowCopyArray = [someArray copyWithZone:nil];
NSSet *shallowCopySet = [NSSet mutableCopyWithZone:nil];
NSDictionary *shallowCopyDict = [[NSDictionary alloc] initWithDictionary:someDictionary copyItems:NO];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deep-copy&quot;&gt;集合的深复制 (deep copy)&lt;/h3&gt;

&lt;p&gt;集合的深复制有两种方法。可以用 initWithArray:copyItems: 将第二个参数设置为YES即可深复制，如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary shallowCopyDict = [[NSDictionary alloc] initWithDictionary:someDictionary copyItems:YES];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你用这种方法深复制，集合里的每个对象都会收到 copyWithZone: 消息。如果集合里的对象遵循 NSCopying 协议，那么对象就会被深复制到新的集合。如果对象没有遵循 NSCopying 协议，而尝试用这种方法进行深复制，会在运行时出错。copyWithZone: 这种拷贝方式只能够提供一层内存拷贝(one-level-deep copy)，而非真正的深复制。&lt;/p&gt;

&lt;p&gt;第二个方法是将集合进行归档(archive)，然后解档(unarchive)，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray *trueDeepCopyArray = [NSKeyedUnarchiver unarchiveObjectWithData:[NSKeyedArchiver archivedDataWithRootObject:oldArray]];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;one-level-deep-copy&quot;&gt;集合的单层深复制 (one-level-deep copy)&lt;/h3&gt;

&lt;p&gt;看到这里，有同学会问：如果在多层数组中，对第一层进行内容拷贝，其它层进行指针拷贝，这种情况是属于深复制，还是浅复制？对此，&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/conceptual/Collections/Articles/Copying.html#//apple_ref/doc/uid/TP40010162-SW3&quot;&gt;苹果官网文档&lt;/a&gt;有这样一句话描述&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This kind of copy is only capable of producing a one-level-deep copy. If you only need a one-level-deep copy...

If you need a true deep copy, such as when you have an array of arrays...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从文中可以看出，苹果认为这种复制不是真正的深复制，而是将其称为&lt;strong&gt;单层深复制(one-level-deep copy)&lt;/strong&gt;。因此，网上有人对浅复制、深复制、单层深复制做了概念区分。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;浅复制(shallow copy)：在浅复制操作时，对于被复制对象的每一层都是指针复制。&lt;/li&gt;
  &lt;li&gt;深复制(one-level-deep copy)：在深复制操作时，对于被复制对象，至少有一层是深复制。&lt;/li&gt;
  &lt;li&gt;完全复制(real-deep copy)：在完全复制操作时，对于被复制对象的每一层都是对象复制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，这些都是概念性的东西，没有必要纠结于此。只要知道进行拷贝操作时，被拷贝的是指针还是内容即可。&lt;/p&gt;

&lt;h3 id=&quot;copymutablecopy&quot;&gt;系统对象的copy与mutableCopy方法&lt;/h3&gt;

&lt;p&gt;不管是集合类对象，还是非集合类对象，接收到copy和mutableCopy消息时，都遵循以下准则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;copy返回imutable对象；所以，如果对copy返回值使用mutable对象接口就会crash；&lt;/li&gt;
  &lt;li&gt;mutableCopy返回mutable对象；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面将针对非集合类对象和集合类对象的copy和mutableCopy方法进行具体的阐述&lt;/p&gt;

&lt;h4 id=&quot;copymutablecopy-1&quot;&gt;1、非集合类对象的copy与mutableCopy&lt;/h4&gt;

&lt;p&gt;系统非集合类对象指的是 NSString, NSNumber … 之类的对象。下面先看个非集合类immutable对象拷贝的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *string = @&quot;origin&quot;;
NSString *stringCopy = [string copy];
NSMutableString *stringMCopy = [string mutableCopy];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;通过查看内存，可以看到 stringCopy 和 string 的地址是一样，进行了指针拷贝；而 stringMCopy 的地址和 string 不一样，进行了内容拷贝；&lt;/p&gt;

&lt;p&gt;再看mutable对象拷贝例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSMutableString *string = [NSMutableString stringWithString: @&quot;origin&quot;];
//copy
NSString *stringCopy = [string copy];
NSMutableString *mStringCopy = [string copy];
NSMutableString *stringMCopy = [string mutableCopy];
//change value
[mStringCopy appendString:@&quot;mm&quot;]; //crash
[string appendString:@&quot; origion!&quot;];
[stringMCopy appendString:@&quot;!!&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行以上代码，会在第7行crash，原因就是 copy 返回的对象是 immutable 对象。注释第7行后再运行，查看内存，发现 string、stringCopy、mStringCopy、stringMCopy 四个对象的内存地址都不一样，说明此时都是做内容拷贝。&lt;/p&gt;

&lt;p&gt;综上两个例子，我们可以得出结论：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在非集合类对象中：对immutable对象进行copy操作，是指针复制，mutableCopy操作时内容复制；对mutable对象进行copy和mutableCopy都是内容复制。用代码简单表示如下：

[immutableObject copy] // 浅复制
[immutableObject mutableCopy] //深复制
[mutableObject copy] //深复制
[mutableObject mutableCopy] //深复制
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;copymutablecopy-2&quot;&gt;2、集合类对象的copy与mutableCopy&lt;/h4&gt;

&lt;p&gt;集合类对象是指NSArray、NSDictionary、NSSet … 之类的对象。下面先看集合类immutable对象使用copy和mutableCopy的一个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray *array = @[@[@&quot;a&quot;, @&quot;b&quot;], @[@&quot;c&quot;, @&quot;d&quot;];
NSArray *copyArray = [array copy];
NSMutableArray *mCopyArray = [array mutableCopy];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;查看内容，可以看到copyArray和array的地址是一样的，而mCopyArray和array的地址是不同的。说明copy操作进行了指针拷贝，mutableCopy进行了内容拷贝。但需要强调的是：此处的内容拷贝，仅仅是拷贝array这个对象，array集合内部的元素仍然是指针拷贝。这和上面的非集合immutable对象的拷贝还是挺相似的，那么mutable对象的拷贝会不会类似呢？我们继续往下，看mutable对象拷贝的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSMutableArray *array = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@&quot;a&quot;],@&quot;b&quot;,@&quot;c&quot;,nil];
NSArray *copyArray = [array copy];
NSMutableArray *mCopyArray = [array mutableCopy];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;查看内存，如我们所料，copyArray、mCopyArray和array的内存地址都不一样，说明copyArray、mCopyArray都对array进行了内容拷贝。同样，我们可以得出结论：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在集合类对象中，对immutable对象进行copy，是指针复制，mutableCopy是内容复制；对mutable对象进行copy和mutableCopy都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制。用代码简单表示如下：

[immutableObject copy] // 浅复制
[immutableObject mutableCopy] //单层深复制
[mutableObject copy] //单层深复制
[mutableObject mutableCopy] //单层深复制
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个代码结论和非集合类的非常相似。&lt;/p&gt;

&lt;p&gt;这时候，是不是有人要问了，如果要对集合对象复制元素怎么办？有这疑问的同学不妨回头看看&lt;strong&gt;集合的深复制&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;好了，深复制与浅复制就讲到这里。&lt;/p&gt;

&lt;p&gt;最后说个题外的东西，在搜集资料的过程中，发现一个有可能犯错的点&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *str = @&quot;string&quot;;
str = @&quot;newString&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这段代码，在执行第二行代码后，内存地址发生了变化。乍一看，有点意外。按照 C 语言的经验，初始化一个字符串之后，字符串的首地址就被确定下来，不管之后如何修改字符串内容，这个地址都不会改变。但此处第二行并不是对 str 指向的内存地址重新赋值，因为赋值操作符左边的 str 是一个指针，也就是说此处修改的是内存地址。&lt;/p&gt;

&lt;p&gt;所以第二行应该这样理解：将@”newStirng”当做一个新的对象，将这段对象的内存地址赋值给str。&lt;/p&gt;

&lt;p&gt;我有如下的两个方法查看内存地址&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p str&lt;/code&gt;会打印对象本身的内存地址和对象内容&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(lldb) p str
(NSString *) $0 = 0x000000010c913680 @&quot;a&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;po &amp;amp;str&lt;/code&gt; 则打印的是引用对象的指针所在的地址&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(lldb) po &amp;amp;str
0x00007fff532fb6c0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 05:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/16/ios_copy_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/16/ios_copy_introduction/</guid>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>IOS 第三方库管理工具</title>
        <description>&lt;h3 id=&quot;cocoapods&quot;&gt;CocoaPods是什么？&lt;/h3&gt;

&lt;p&gt;当你开发iOS应用时，会经常使用到很多第三方开源类库，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONKit，AFNetWorking&lt;/code&gt;等等。可能某个类库又用到其他类库，所以要使用它，必须得另外下载其他类库，而其他类库又用到其他类库，“子子孙孙无穷尽也”，这也许是比较特殊的情况。总之意思就是，手动一个个去下载所需类库十分麻烦。另外一种常见情况是，你项目中用到的类库有更新，你必须得重新下载新版本，重新加入到项目中，十分麻烦。如果能有什么工具能解决这些恼人的问题，那将“善莫大焉”。所以，你需要CocoaPods。&lt;/p&gt;

&lt;p&gt;CocoaPods应该是iOS最常用最有名的类库管理工具了，上述两个烦人的问题，通过cocoaPods，只需要一行命令就可以完全解决，当然前提是你必须正确设置它。重要的是，绝大部分有名的开源类库，都支持CocoaPods。所以，作为iOS程序员的我们，掌握CocoaPods的使用是必不可少的基本技能了。&lt;/p&gt;

&lt;h3 id=&quot;cocoapods-1&quot;&gt;如何下载和安装CocoaPods？&lt;/h3&gt;

&lt;p&gt;在安装CocoaPods之前，首先要在本地安装好Ruby环境。至于如何在Mac中安装好Ruby环境，请google一下，本文不再涉及。&lt;/p&gt;

&lt;p&gt;假如你在本地已经安装好Ruby环境，那么下载和安装CocoaPods将十分简单，只需要一行命令。在Terminator（也就是终端）中输入以下命令.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你在天朝，在终端中敲入这个命令之后，会发现半天没有任何反应。原因无他，因为那堵墙阻挡了cocoapods.org。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources --remove https://rubygems.org/
//等有反应之后再敲入以下命令
$ gem sources -a https://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;只有在终端中出现下面文字才表明你上面的命令是成功的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** CURRENT SOURCES ***

https://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这时候，你再次在终端中运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;等上十几秒钟，CocoaPods就可以在你本地下载并且安装好了，不再需要其他设置。&lt;/p&gt;

&lt;h3 id=&quot;cocoapods-2&quot;&gt;如何使用CocoaPods？&lt;/h3&gt;

&lt;p&gt;好了，安装好CocoPods之后，接下来就是使用它。所幸，使用CocoPods和安装它一样简单，也是通过一两行命令就可以搞定。&lt;/p&gt;

&lt;h4 id=&quot;cocoapodsafnetworking&quot;&gt;场景1：利用CocoaPods，在项目中导入AFNetworking类库&lt;/h4&gt;

&lt;p&gt;AFNetworking类库在GitHub地址是：&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot;&gt;https://github.com/AFNetworking/AFNetworking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为了确定AFNetworking是否支持CocoaPods，可以用CocoaPods的搜索功能验证一下。在终端中输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pod search AFNetworking
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;过几秒钟之后，你会在终端中看到关于AFNetworking类库的一些信息。&lt;/p&gt;

&lt;p&gt;这说明，AFNetworking是支持CocoaPods，所以我们可以利用CocoaPods将AFNetworking导入你的项目中。&lt;/p&gt;

&lt;p&gt;你看到这里也许会问，CocoaPods为什么能下载AFNetworking呢，而不是下载其他类库呢？这个问题的答案是，有个文件来控制CocoaPods该下载什么。这个文件就叫做“Podfile”（注意，一定得是这个文件名，而且没有后缀）。你创建一个Podfile文件，然后在里面添加你需要下载的类库，也就是告诉CocoaPods，“某某和某某和某某某，快到碗里来！”。每个项目只需要一个Podfile文件。&lt;/p&gt;

&lt;p&gt;好吧，废话少说，我们先创建这个神奇的PodFile。在终端中进入（cd命令）你项目所在目录，然后在当前目录下，利用vim创建Podfile，运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim Podfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后在Podfile文件中输入以下文字：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;platform :ios, &#39;7.0&#39;
pod &quot;AFNetworking&quot;, &quot;~&amp;gt; 2.0&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后保存退出。vim环境下，保存退出命令是：&lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;这时候，你会发现你的项目目录中，出现一个名字为Podfile的文件，而且文件内容就是你刚刚输入的内容。注意，&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile文件应该和你的工程文件.xcodeproj&lt;/code&gt;在同一个目录下。&lt;/p&gt;

&lt;p&gt;这时候，你就可以利用CocoPods下载&lt;code class=&quot;highlighter-rouge&quot;&gt;AFNetworking&lt;/code&gt;类库了。还是在终端中的当前项目目录下，运行以下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pod install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;因为是在你的项目中导入AFNetworking，这就是为什么这个命令需要你进入你的项目所在目录中运行。&lt;/p&gt;

&lt;p&gt;运行上述命令之后,终端出现以下信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Analyzing dependencies
        Downloading dependencies
        Installing AFNetworking (2.0.2)
        Generating Pods project
        Integrating client project

        [!] From now on use `CocoaPodsDemo.xcworkspace`.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意最后一句话，意思是：以后打开项目就用 CocoaPodsDemo.xcworkspace 打开，而不是之前的.xcodeproj文件。&lt;/p&gt;

&lt;p&gt;如果需要更新使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pod update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;上述都只是CocoaPods的最基本用法。要继续研究CocoaPods其他高级用法，请点击这里&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/wiki&quot;&gt;CocoaPods Wiki&lt;/a&gt; 。&lt;/p&gt;

</description>
        <pubDate>Wed, 15 Jun 2016 15:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/15/ios_pod_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/15/ios_pod_introduction/</guid>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>IOS 快速开发工具</title>
        <description>&lt;h3 id=&quot;alcatraz&quot;&gt;第一部分 Alcatraz插件的介绍&lt;/h3&gt;

&lt;p&gt;Alcatraz 是Xcode管理插件的工具,在上面能找到各种提高效率的插件。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin&quot;&gt;https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装的方法也很简单，如果你以前没有安装过那执行下面指令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -fsSL https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果之前安装过但是Xcode最新版本不能用了，那就先卸载旧的再安装下新的。&lt;/p&gt;

&lt;p&gt;卸载的方法是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin
rm -rf ~/Library/Application\ Support/Alcatraz/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;第二部分 插件的安装&lt;/h3&gt;

&lt;p&gt;in Xcode: &lt;code class=&quot;highlighter-rouge&quot;&gt;go to Windows → Package Manager&lt;/code&gt; and search for &lt;code class=&quot;highlighter-rouge&quot;&gt;插件名&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/70505dece9a75af5ca4715fff66271127f7d5b78/687474703a2f2f616c63617472617a2e696f2f696d616765732f6d656e754032782e706e67&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/919efe4e1e53237df51d7010c862bd5c04fd6a70/687474703a2f2f616c63617472617a2e696f2f696d616765732f73637265656e73686f744032782e706e67&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;第三部分 插件的汇总&lt;/h3&gt;

&lt;h4 id=&quot;esjsonformat-xcode&quot;&gt;ESJsonFormat-Xcode&lt;/h4&gt;

&lt;p&gt;ESJsonFormat-Xcode 是Xcode JSON格式化输出为模型的属性的插件。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/EnjoySR/ESJsonFormat-Xcode&quot;&gt;https://github.com/EnjoySR/ESJsonFormat-Xcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/EnjoySR/ESJsonFormat-Xcode/master/ScreenShot/ScreenShot2.gif&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;mlautoreplace&quot;&gt;MLAutoReplace&lt;/h4&gt;

&lt;p&gt;MLAutoReplace make you write code more quickly.&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/molon/MLAutoReplace&quot;&gt;https://github.com/molon/MLAutoReplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/molon/MLAutoReplace/master/replaceTS.gif&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;vvdocumenter-xcode&quot;&gt;VVDocumenter-Xcode&lt;/h4&gt;

&lt;p&gt;VVDocumenter 是一个Xcode的代码注释框架，可以简单的操作三斜杠&lt;code class=&quot;highlighter-rouge&quot;&gt;///&lt;/code&gt;即可生成对应的代码注释，在菜单Window中找到VVDocumenter 可以进行一些个性化的设置。总体来说还是非常实用和好用的。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/onevcat/VVDocumenter-Xcode&quot;&gt;https://github.com/onevcat/VVDocumenter-Xcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ca5518c9872e15b8a95b9d8c5f44bc331977d710/68747470733a2f2f7261772e6769746875622e636f6d2f6f6e65766361742f5656446f63756d656e7465722d58636f64652f6d61737465722f53637265656e53686f742e676966&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;ksimagenamed&quot;&gt;KSImageNamed&lt;/h4&gt;

&lt;p&gt;KSImageNamed 是一款Xcode 图片文件提示工具.当你输入&lt;code class=&quot;highlighter-rouge&quot;&gt;imageNamed: &lt;/code&gt;的时候会弹出所有图片的名称和预览图片选择，。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/ksuther/KSImageNamed-Xcode&quot;&gt;https://github.com/ksuther/KSImageNamed-Xcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c354bf04524df86daeabe7a6d2b9926fac790f85/68747470733a2f2f7261772e6769746875622e636f6d2f6b7375746865722f4b53496d6167654e616d65642d58636f64652f6d61737465722f73637265656e73686f742e676966&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;scxcodeminimap&quot;&gt;SCXcodeMiniMap&lt;/h4&gt;

&lt;p&gt;SCXcodeMiniMap 是Xcode中类似于sublime的功能，这是非常好用的。 并且右边的代码迷你地图提供了很多可配置的地方，而且会高亮显示宏和注释部分，小地图中点击任何地方也会自动滚动至此。这在有的类代码特别长时你写着写着都不知道自己在哪里了,会很有用.&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/stefanceriu/SCXcodeMiniMap&quot;&gt;https://github.com/stefanceriu/SCXcodeMiniMap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/202fb6a7e1e1eb580af27ac00a0b3c80ef5b154d/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f31323734383230312f5265636f7264696e67732f534358636f64654d696e696d61702f76322e322f73656c656374656453796d626f6c496e7374616e636573486967686c69676874696e672e676966&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;bbudebuggertuckaway&quot;&gt;BBUDebuggerTuckAway&lt;/h4&gt;

&lt;p&gt;BBUDebuggerTuckAway 在Xcode编辑代码的时候，调试框会自动缩回。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/neonichu/BBUDebuggerTuckAway&quot;&gt;https://github.com/neonichu/BBUDebuggerTuckAway&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/neonichu/BBUDebuggerTuckAway/raw/master/plugin.gif&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：三星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;cocoapods-xcode-plugin&quot;&gt;cocoapods-xcode-plugin&lt;/h4&gt;

&lt;p&gt;cocoapods-xcode-plugin 是一个Xcode上Pod管理工具。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/kattrali/cocoapods-xcode-plugin&quot;&gt;https://github.com/kattrali/cocoapods-xcode-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kattrali/cocoapods-xcode-plugin/raw/master/menu.png&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：三星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;scxcodeswitchexpander&quot;&gt;SCXcodeSwitchExpander&lt;/h4&gt;

&lt;p&gt;SCXcodeSwitchExpander  是Xcode非常方便的创建枚举库，自动生成了所有可能，并且每种里面都包含代码块，可以直接tab切换。  虽然使用率不会特别高但是用到的时候还是非常方便的。&lt;/p&gt;

&lt;p&gt;源码地址： &lt;a href=&quot;https://github.com/stefanceriu/SCXcodeSwitchExpander&quot;&gt;https://github.com/stefanceriu/SCXcodeSwitchExpander&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a544a54d43b6e26c75d56889b7a6a4df8a90b4a5/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f31323734383230312f534358636f6465537769746368457870616e6465722f534358636f6465537769746368457870616e646572322e676966&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;hostringsense&quot;&gt;HOStringSense&lt;/h4&gt;

&lt;p&gt;HOStringSense 是Xcode内容编辑工具，会把换行，空格转化成代码片段。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/holtwick/HOStringSense-for-Xcode&quot;&gt;https://github.com/holtwick/HOStringSense-for-Xcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/holtwick/HOStringSense-for-Xcode/raw/master/StringDemoAnimation.gif&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：三星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;xalign&quot;&gt;XAlign&lt;/h4&gt;

&lt;p&gt;XAlign 是Xcode中自动对齐库,可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode -&amp;gt; Edit -&amp;gt; XAlign&lt;/code&gt; 设置快捷键。默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + Cmd + X&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/qfish/XAlign&quot;&gt;https://github.com/qfish/XAlign&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7973c0e352b1f91e3efe5b3550cff5df97f4589a/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f657175616c2e676966&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;dash-plugin-for-xcode&quot;&gt;Dash-Plugin-for-Xcode&lt;/h4&gt;

&lt;p&gt;Dash-Plugin-for-Xcode 是Bogdan Popescu开发的一款集成了Dash文档查看器应用的Xcode插件，允许开发者在使用Option-Click或作用相同的快捷键操作查看当前文本的相关文档时，用Dash代替Xcode的文档查看器。&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/omz/Dash-Plugin-for-Xcode&quot;&gt;https://github.com/omz/Dash-Plugin-for-Xcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：三星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;peckham&quot;&gt;Peckham&lt;/h4&gt;

&lt;p&gt;Peckham 是Xcode快速导入头文件的插件,默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ctrl + P&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/markohlebar/Peckham&quot;&gt;https://github.com/markohlebar/Peckham&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/markohlebar/Peckham/raw/master/Misc/Peckham.gif&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;xtodo-xcode&quot;&gt;XToDo-Xcode&lt;/h4&gt;

&lt;p&gt;XToDo-Xcode 是一个注释辅助插件, 可以把项目中的 TODO FIXME等注释列出来.&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/trawor/XToDo&quot;&gt;https://github.com/trawor/XToDo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/trawor/XToDo/raw/master/screenshots/2.png&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jun 2016 20:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/14/ios_xcodeplu_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/14/ios_xcodeplu_introduction/</guid>
        
        <category>ios</category>
        
        <category>Xcode</category>
        
        
      </item>
    
      <item>
        <title>Android 快速开发工具</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;第一部分 插件的介绍&lt;/h3&gt;

&lt;p&gt;Google 在2013年5月的I/O开发者大会推出了基于&lt;code class=&quot;highlighter-rouge&quot;&gt;IntelliJ IDEA java ide&lt;/code&gt;上的&lt;code class=&quot;highlighter-rouge&quot;&gt;Android Studio&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;Android Studio&lt;/code&gt;是一个功能齐全的开发工具，还提供了第三方插件的支持。让开发人员更快速更好的开发程序。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;第二部分 插件的安装&lt;/h3&gt;

&lt;p&gt;in Android Studio: &lt;code class=&quot;highlighter-rouge&quot;&gt;go to File → Settings → Plugins → Browse repositories&lt;/code&gt; and search for &lt;code class=&quot;highlighter-rouge&quot;&gt;插件名&lt;/code&gt; or in Android Studio: go to download it jar and install &lt;code class=&quot;highlighter-rouge&quot;&gt;File → Settings → Plugins → Install plugin from disk&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;第三部分 插件的汇总&lt;/h3&gt;

&lt;h4 id=&quot;android-butterknife-zelezny&quot;&gt;Android ButterKnife Zelezny&lt;/h4&gt;

&lt;p&gt;ButterKnife是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。PS:效果图就不贴了，打开插件下载地址和源码地址都能看见，而且据多了加载效果图蛮卡的。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7369?pr=androidstudio&quot;&gt;https://plugins.jetbrains.com/plugin/7369?pr=androidstudio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址： &lt;a href=&quot;https://github.com/avast/android-butterknife-zelezny&quot;&gt;https://github.com/avast/android-butterknife-zelezny&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件教程： &lt;a href=&quot;http://blog.csdn.net/dreamlivemeng/article/details/51261170&quot;&gt;http://blog.csdn.net/dreamlivemeng/article/details/51261170&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;gsonformat&quot;&gt;GsonFormat&lt;/h4&gt;

&lt;p&gt;GsonFormat是一个快速格式化json数据,自动生成实体类参数的插件。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7654?pr=androidstudio&quot;&gt;https://plugins.jetbrains.com/plugin/7654?pr=androidstudio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/zzz40500/GsonFormat&quot;&gt;https://github.com/zzz40500/GsonFormat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件教程：&lt;a href=&quot;http://blog.csdn.net/dreamlivemeng/article/details/51262538&quot;&gt;http://blog.csdn.net/dreamlivemeng/article/details/51262538&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;android-drawable-importer&quot;&gt;Android Drawable Importer&lt;/h4&gt;

&lt;p&gt;为了适应所有Android屏幕的大小和密度，每个Android项目都会包含drawable文件夹。任何具备Android开发经验的开发人员都知道，为了支持所有的屏幕尺寸，你必须给每个屏幕类型导入不同的画板。Android Drawable Importer插件能让这项工作变得更容易。它可以减少导入缩放图像到Android项目所需的工作量。Android Drawable Importer添加了一个在不同分辨率导入画板或缩放指定图像到定义分辨率的选项。这个插件加速了开发人员的画板工作。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7658?pr=androidstudio&quot;&gt;https://plugins.jetbrains.com/plugin/7658?pr=androidstudio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/winterDroid/android-drawable-importer-intellij-plugin&quot;&gt;https://github.com/winterDroid/android-drawable-importer-intellij-plugin
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件教程地址：&lt;a href=&quot;http://blog.csdn.net/lee_sire/article/details/49684385&quot;&gt;http://blog.csdn.net/lee_sire/article/details/49684385&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：三星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;android-selector-chapek--selectorchapek-for-android&quot;&gt;android-selector-chapek / SelectorChapek for Android&lt;/h4&gt;

&lt;p&gt;根据资源自动生成相应的selector。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7298&quot;&gt;https://plugins.jetbrains.com/plugin/7298&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/inmite/android-selector-chapek&quot;&gt;https://github.com/inmite/android-selector-chapek&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：三星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;android-parcelable-code-generator&quot;&gt;Android Parcelable code generator&lt;/h4&gt;

&lt;p&gt;快速实现Parcelable接口的插件。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7332?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7332?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/mcharmas/android-parcelable-intellij-plugin/&quot;&gt;https://github.com/mcharmas/android-parcelable-intellij-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件教程地址：&lt;a href=&quot;http://blog.csdn.net/kroclin/article/details/40902721&quot;&gt;http://blog.csdn.net/kroclin/article/details/40902721&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;markdown&quot;&gt;Markdown&lt;/h4&gt;

&lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/5970?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/5970?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件文档地址：&lt;a href=&quot;https://github.com/nicoulaj/idea-markdown&quot;&gt;https://github.com/nicoulaj/idea-markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;android-postfix-completion&quot;&gt;Android Postfix completion&lt;/h4&gt;

&lt;p&gt;可根据后缀快速完成代码。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7775?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7775?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件教程地址：&lt;a href=&quot;http://blog.jetbrains.com/idea/2014/03/postfix-completion/&quot;&gt;http://blog.jetbrains.com/idea/2014/03/postfix-completion/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;androidaccessors&quot;&gt;AndroidAccessors&lt;/h4&gt;

&lt;p&gt;快速实现get和set方法的插件。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7496?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7496?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件文档地址：&lt;a href=&quot;https://github.com/jonstaff/AndroidAccessors&quot;&gt;https://github.com/jonstaff/AndroidAccessors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：三星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;lifecycle-sorter&quot;&gt;Lifecycle Sorter&lt;/h4&gt;

&lt;p&gt;可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7742?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7742?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/armandAkop/Lifecycle-Sorter&quot;&gt;https://github.com/armandAkop/Lifecycle-Sorter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;adb-wifi-rootwifi&quot;&gt;ADB WIFI 无需root就能wifi调试。&lt;/h4&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7856?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7856?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/layerlre/ADBWIFI&quot;&gt;https://github.com/layerlre/ADBWIFI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数： 五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;adb-idea&quot;&gt;ADB Idea&lt;/h4&gt;

&lt;p&gt;adb 调试工具,Uninstall App、Kill App、Start App、Restart App、Clear App Data、Clear App Data and Restart&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7380?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7380?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/pbreault/adb-idea/&quot;&gt;https://github.com/pbreault/adb-idea/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;codeglance&quot;&gt;CodeGlance&lt;/h4&gt;

&lt;p&gt;最大的用途：可用于快速定位代码。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7275?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7275?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/Vektah/CodeGlance&quot;&gt;https://github.com/Vektah/CodeGlance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;jsononlineviewer&quot;&gt;JSONOnlineViewer&lt;/h4&gt;

&lt;p&gt;可实现直接在android studio中调试接口数据，可以选择请求类型，自定义请求头及请求体，json数据格式化后展示&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7838?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7838?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;findbugs-idea&quot;&gt;FindBugs-IDEA&lt;/h4&gt;

&lt;p&gt;通过FindBugs帮你找到隐藏的bug及不好的做法。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/3847?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/3847?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/andrepdo/findbugs-idea/tree/master&quot;&gt;https://github.com/andrepdo/findbugs-idea/tree/master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;jimu-mirror&quot;&gt;jimu Mirror&lt;/h4&gt;

&lt;p&gt;这是一个可以让你在真实的设备上迅速测试布局的插件。jimu Mirror允许在设备上预览随同编码更新的Android布局。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7517?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7517?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件教程地址：&lt;a href=&quot;http://www.itnose.net/detail/6204426.html&quot;&gt;http://www.itnose.net/detail/6204426.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;javadoc&quot;&gt;JavaDoc&lt;/h4&gt;

&lt;p&gt;添加注释，可自定义模板。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/?idea_ce&amp;amp;pluginId=7157&quot;&gt;https://plugins.jetbrains.com/plugin/?idea_ce&amp;amp;pluginId=7157&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/setial/intellij-javadocs&quot;&gt;https://github.com/setial/intellij-javadocs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数： 五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;android-stringsxml-tools&quot;&gt;Android strings.xml tools&lt;/h4&gt;

&lt;p&gt;可以用来管理Android项目中的字符串资源。它提供了排序Android本地文件和添加缺少的字符串的基本操作。虽然这个插件是有限制的，但如果应用程序有大量的字符串资源，那这个插件就非常有用了。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7498?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7498?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/constantine-ivanov/strings-xml-tools&quot;&gt;https://github.com/constantine-ivanov/strings-xml-tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;robotium-recorder&quot;&gt;Robotium Recorder&lt;/h4&gt;

&lt;p&gt;Robotium Recorder是一个自动化测试框架，用于测试在模拟器和Android设备上原生的和混合的移动应用程序。Robotium Recorder可以让你记录测试案例和用户操作。你也可以查看不同Android活动时的系统功能和用户测试场景。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7513?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7513?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件官方网址：&lt;a href=&quot;http://robotium.com/&quot;&gt;http://robotium.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;android-holo-colors-generator&quot;&gt;Android Holo Colors Generator&lt;/h4&gt;

&lt;p&gt;通过自定义Holo主题颜色生成对应的Drawable和布局文件&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7366?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7366?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/jeromevdl/android-holo-colors-idea-plugin&quot;&gt;https://github.com/jeromevdl/android-holo-colors-idea-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;lint-cleaner-plugin&quot;&gt;lint-cleaner-plugin&lt;/h4&gt;

&lt;p&gt;删除未使用的资源,包括String字符串,颜色和尺寸。 这是一个Gradle插件，所以如何配置可以去github的源码上看。&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/marcoRS/lint-cleaner-plugin&quot;&gt;https://github.com/marcoRS/lint-cleaner-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;codota&quot;&gt;codota&lt;/h4&gt;

&lt;p&gt;该网站搜集了大量的代码，号称超过700W的代码实例。提供了chrome和as插件。&lt;/p&gt;

&lt;p&gt;插件下载地址：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7638?pr=&quot;&gt;https://plugins.jetbrains.com/plugin/7638?pr=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插件官方网址：&lt;a href=&quot;https://www.codota.com/&quot;&gt;https://www.codota.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：五星&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;ectranslation&quot;&gt;ECTranslation&lt;/h4&gt;

&lt;p&gt;一个androidstudio上面的翻译插件（将英文翻译为中文）。 暂时只能以jar的方式安装。jar下载地址以及使用方法在github上的源码地址上都有详细描述。&lt;/p&gt;

&lt;p&gt;插件源码地址：&lt;a href=&quot;https://github.com/Skykai521/ECTranslation&quot;&gt;https://github.com/Skykai521/ECTranslation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐指数：四星&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 17:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/13/android_studio_plugins_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/13/android_studio_plugins_introduction/</guid>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>IOS 炫酷框架</title>
        <description>&lt;h3 id=&quot;pophttpsgithubcomfacebookpop&quot;&gt;&lt;a href=&quot;https://github.com/facebook/pop&quot;&gt;pop&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/facebook/pop/blob/master/Images/pop.gif?raw=true&quot; alt=&quot;pop&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;poppinghttpsgithubcomschneiderandrepopping&quot;&gt;&lt;a href=&quot;https://github.com/schneiderandre/popping&quot;&gt;popping&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6ab14f37121c61a4b568c38376f0e24984d1aad8/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f31393135303330302f4769746875622f506f7070696e672f706f7070696e672e706e67&quot; alt=&quot;popping&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a7a98afd238fd3e51d50af8389e6c2dfc3577d45/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f31393135303330302f4769746875622f506f7070696e672f706f7070696e672e676966&quot; alt=&quot;popping&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;springhttpsgithubcommengtospring&quot;&gt;&lt;a href=&quot;https://github.com/MengTo/Spring&quot;&gt;Spring&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://cl.ly/image/3a1r1d3l3D1j/spring-logo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cl.ly/image/241o0G1G3S36/download/springsetup.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cl.ly/image/1n1E2j3W3y24/springscreen.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jnwspringanimationhttpsgithubcomjwillingjnwspringanimation&quot;&gt;&lt;a href=&quot;https://github.com/jwilling/JNWSpringAnimation&quot;&gt;JNWSpringAnimation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://jwilling.com/serve/github/jnwspringanimation/preview.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dcanimationkithttpsgithubcomdaltoniamdcanimationkit&quot;&gt;&lt;a href=&quot;https://github.com/daltoniam/DCAnimationKit&quot;&gt;DCAnimationKit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Tada&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/tada.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bounce&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/bounce.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pulse&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/pulse.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shake&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/shake.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swing&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/swing.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Snap&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/snapin.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bounce&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/bouncein.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expand&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/expandin.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compress&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/compressin.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hinge&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/hinge.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drop&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/drop.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Move&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/slide.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rotation&lt;/strong&gt;
&lt;img src=&quot;https://raw.github.com/daltoniam/DCAnimationKit/master/gifs/rotate.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rbbanimationhttpsgithubcomrobbrbbanimation&quot;&gt;&lt;a href=&quot;https://github.com/robb/RBBAnimation&quot;&gt;RBBAnimation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://robb.is/img/rbbanimation/rainbow.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://robb.is/img/rbbanimation/spring.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://robb.is/img/rbbanimation/ease-in-out-back.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://robb.is/img/rbbanimation/bounce.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://robb.is/img/rbbanimation/sine-wave.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pop-mcanimatehttpsgithubcommatthewcheokpop-mcanimate&quot;&gt;&lt;a href=&quot;https://github.com/matthewcheok/POP-MCAnimate&quot;&gt;POP-MCAnimate&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;jhchainableanimationshttpsgithubcomjhurrayjhchainableanimations&quot;&gt;&lt;a href=&quot;https://github.com/jhurray/JHChainableAnimations&quot;&gt;JHChainableAnimations&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jhurray/JHChainableAnimations/raw/master/img/logo.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jhurray/JHChainableAnimations/master/img/JHChainableAnimationsExample1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jhurray/JHChainableAnimations/master/Gifs/JHChainableAnimationsExample1.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/jhurray/JHChainableAnimations/raw/master/img/JHChainableAnimationsExample2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/jhurray/JHChainableAnimations/raw/master/Gifs/JHChainableAnimationsExample2.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/jhurray/JHChainableAnimations/raw/master/img/JHChainableAnimationsExample3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/jhurray/JHChainableAnimations/raw/master/Gifs/JHChainableAnimationsExample3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pmtweenhttpsgithubcompoetmountainpmtween&quot;&gt;&lt;a href=&quot;https://github.com/poetmountain/PMTween&quot;&gt;PMTween&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;jazzhandshttpsgithubcomiftttjazzhands&quot;&gt;&lt;a href=&quot;https://github.com/IFTTT/JazzHands&quot;&gt;JazzHands&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/IFTTT/JazzHands/screenshots/screenshots/intro.gif&quot; alt=&quot;Jazz Hands&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;animatedtransitiongalleryhttpsgithubcomshu223animatedtransitiongallery&quot;&gt;&lt;a href=&quot;https://github.com/shu223/AnimatedTransitionGallery&quot;&gt;AnimatedTransitionGallery&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/shu223/AnimatedTransitionGallery/master/gif/gallery.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/shu223/AnimatedTransitionGallery/master/gif/coreimage.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/shu223/AnimatedTransitionGallery/master/gif/motionblur.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/shu223/AnimatedTransitionGallery/master/gif/boxblur.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rztransitionshttpsgithubcomraizlabsrztransitions&quot;&gt;&lt;a href=&quot;https://github.com/Raizlabs/RZTransitions&quot;&gt;RZTransitions&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Raizlabs/RZTransitions/master/Web/RZTransitions.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://raw.github.com/Raizlabs/RZTransitions/master/Web/RZTransitionsDemo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;foldingtabbarioshttpsgithubcomyalantisfoldingtabbarios&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/FoldingTabBar.iOS&quot;&gt;FoldingTabBar.iOS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d13yacurqjgara.cloudfront.net/users/495792/screenshots/2003376/tab_bar_animation_fin-02.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;side-menuioshttpsgithubcomyalantisside-menuios&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/Side-Menu.iOS&quot;&gt;Side-Menu.iOS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d13yacurqjgara.cloudfront.net/users/125056/screenshots/1689922/events-menu_1-1-6.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;context-menuioshttpsgithubcomyalantiscontext-menuios&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/Context-Menu.iOS&quot;&gt;Context-Menu.iOS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d13yacurqjgara.cloudfront.net/users/125056/screenshots/1785274/99miles-profile-light_1-1-4.gif&quot; alt=&quot;ContextMenu&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;guillotinemenuhttpsgithubcomyalantisguillotinemenu&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/GuillotineMenu&quot;&gt;GuillotineMenu&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d13yacurqjgara.cloudfront.net/users/495792/screenshots/2018249/draft_06.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;perseihttpsgithubcomyalantispersei&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/Persei&quot;&gt;Persei&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Yalantis/Persei/master/Assets/animation.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pull-to-refreshrentals-ioshttpsgithubcomyalantispull-to-refreshrentals-ios&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/Pull-to-Refresh.Rentals-iOS&quot;&gt;Pull-to-Refresh.Rentals-iOS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d13yacurqjgara.cloudfront.net/users/125056/screenshots/1650317/realestate-pull_1-2-3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pulltomakesouphttpsgithubcomyalantispulltomakesoup&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/PullToMakeSoup&quot;&gt;PullToMakeSoup&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Yalantis/PullToMakeSoup/master/PullToMakeSoupDemo/Resouces/recipe-finder.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pulltomakeflighthttpsgithubcomyalantispulltomakeflight&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/PullToMakeFlight&quot;&gt;PullToMakeFlight&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Yalantis/PullToMakeFlight/master/PullToMakeFlightDemo/Resources/tours-pull-airplane.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kolodahttpsgithubcomyalantiskoloda&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/Koloda&quot;&gt;Koloda&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/Yalantis/Koloda/blob/master/Koloda_v2_example_animation.gif&quot; alt=&quot;Preview&quot; /&gt;
&lt;img src=&quot;https://github.com/Yalantis/Koloda/blob/master/Koloda_v1_example_animation.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;starwarsioshttpsgithubcomyalantisstarwarsios&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/StarWars.iOS&quot;&gt;StarWars.iOS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://yalantis-com.s3.amazonaws.com/uploads/ckeditor/pictures/49/content_star_wars-shot__1_.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;eatfithttpsgithubcomyalantiseatfit&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/EatFit&quot;&gt;EatFit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://yalantis.com/media/content/ckeditor/2015/09/30/charts-animation.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;preloaderophiuchushttpsgithubcomyalantispreloaderophiuchus&quot;&gt;&lt;a href=&quot;https://github.com/Yalantis/Preloader.Ophiuchus&quot;&gt;Preloader.Ophiuchus&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Yalantis/Ophiuchus/master/Example/Ophiuchus/Resources/yalantistwodirections.gif&quot; alt=&quot;Yalantis&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Yalantis/Ophiuchus/master/Example/Ophiuchus/Resources/animation.gif&quot; alt=&quot;Preview&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Yalantis/Ophiuchus/master/Example/Ophiuchus/Resources/thegreenhorse.gif&quot; alt=&quot;The Green Horse&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;animated-tab-barhttpsgithubcomramotionanimated-tab-bar&quot;&gt;&lt;a href=&quot;https://github.com/Ramotion/animated-tab-bar&quot;&gt;animated-tab-bar&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ramotion/animated-tab-bar/master/Screenshots/tab-bar-icons-iphone-ramotion-animation-interface-design.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bubbletransitionhttpsgithubcomandreamazzbubbletransition&quot;&gt;&lt;a href=&quot;https://github.com/andreamazz/BubbleTransition&quot;&gt;BubbleTransition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/BubbleTransition/master/assets/logo.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/BubbleTransition/master/assets/screenshot.gif&quot; alt=&quot;BubbleTransition&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios-bubble-transitionhttpsgithubcomfitomadios-bubble-transition&quot;&gt;&lt;a href=&quot;https://github.com/fitomad/iOS-Bubble-Transition&quot;&gt;iOS-Bubble-Transition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/fitomad/iOS-Bubble-Transition/blob/master/Bubble.gif?raw=true&quot; alt=&quot;Bubble Transition&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cnppopupcontrollerhttpsgithubcomcarsonperrotticnppopupcontroller&quot;&gt;&lt;a href=&quot;https://github.com/carsonperrotti/CNPPopupController&quot;&gt;CNPPopupController&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/carsonperrotti/CNPPopupController/master/CNPPopupControllerExample/CNPPopupController.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;giftcard-implementationhttpsgithubcommartinrgbgiftcard-implementation&quot;&gt;&lt;a href=&quot;https://github.com/MartinRGB/GiftCard-Implementation&quot;&gt;GiftCard-Implementation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/MartinRGB/GiftCard-Implementation/blob/master/Gif/Origami.gif?raw=true&quot; alt=&quot;origami&quot; /&gt;
&lt;img src=&quot;https://github.com/MartinRGB/GiftCard-Implementation/blob/master/Gif/Xcode.gif?raw=true&quot; alt=&quot;xcode&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dkchainableanimationkithttpsgithubcomdravenessdkchainableanimationkit&quot;&gt;&lt;a href=&quot;https://github.com/Draveness/DKChainableAnimationKit&quot;&gt;DKChainableAnimationKit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Draveness/DKChainableAnimationKit/master/Gifs/DKChainableAnimationKit.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Draveness/DKChainableAnimationKit/master/Gifs/Code1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Draveness/DKChainableAnimationKit/master/Gifs/Demo1.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Draveness/DKChainableAnimationKit/master/Gifs/Code2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Draveness/DKChainableAnimationKit/master/Gifs/Demo2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tindersimpleswipecardshttpsgithubcomcwrichardkimtindersimpleswipecards&quot;&gt;&lt;a href=&quot;https://github.com/cwRichardKim/TinderSimpleSwipeCards&quot;&gt;TinderSimpleSwipeCards&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/4bYw12e.gif&quot; alt=&quot;alt tag&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/krDNpR0.gif&quot; alt=&quot;alt tag&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/W4bIRkc.gif&quot; alt=&quot;alt tag&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/3yk6aiS.gif&quot; alt=&quot;alt tag&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/IIFVkm4.gif&quot; alt=&quot;alt tag&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/j1ISIq5.gif&quot; alt=&quot;alt tag&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/PQYs4sH.gif&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jtmaterialtransitionhttpsgithubcomjonathantribouharetjtmaterialtransition&quot;&gt;&lt;a href=&quot;https://github.com/jonathantribouharet/JTMaterialTransition&quot;&gt;JTMaterialTransition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jonathantribouharet/JTMaterialTransition/master/Screens/example.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;watchtransitionhttpsgithubcomkongtomorrowwatchtransition&quot;&gt;&lt;a href=&quot;https://github.com/kongtomorrow/WatchTransition&quot;&gt;WatchTransition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kongtomorrow/WatchTransition/raw/master/WatchFaceTransition.gif&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kypushtransitionhttpsgithubcomkittenyangkypushtransition&quot;&gt;&lt;a href=&quot;https://github.com/KittenYang/KYPushTransition&quot;&gt;KYPushTransition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/KittenYang/KYPushTransition/master/demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uiview-shakehttpsgithubcomandreamazzuiview-shake&quot;&gt;&lt;a href=&quot;https://github.com/andreamazz/UIView-Shake&quot;&gt;UIView-Shake&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/UIView-Shake/master/assets/logo.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/UIView-Shake/master/assets/screenshot.gif&quot; alt=&quot;UIView+Shake&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uitextfield-shakehttpsgithubcomandreamazzuitextfield-shake&quot;&gt;&lt;a href=&quot;https://github.com/andreamazz/UITextField-Shake&quot;&gt;UITextField-Shake&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/UITextField-Shake/master/assets/logo.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/UITextField-Shake/master/assets/screenshot.gif&quot; alt=&quot;UITextField+Shake&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rmpzoomtransitionanimatorhttpsgithubcomrecruit-mprmpzoomtransitionanimator&quot;&gt;&lt;a href=&quot;https://github.com/recruit-mp/RMPZoomTransitionAnimator&quot;&gt;RMPZoomTransitionAnimator&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/recruit-mp/RMPZoomTransitionAnimator/master/docs/collectionview.gif&quot; alt=&quot;Screen shot&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/recruit-mp/RMPZoomTransitionAnimator/master/docs/tableview.gif&quot; alt=&quot;Screen shot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;popmenuhttpsgithubcomxhzengaibpopmenu&quot;&gt;&lt;a href=&quot;https://github.com/xhzengAIB/PopMenu&quot;&gt;PopMenu&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/xhzengAIB/LearnEnglish/raw/master/Screenshots/XHSinaMenuViewExample.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;zfdragablemodaltransitionhttpsgithubcomzoonoozzfdragablemodaltransition&quot;&gt;&lt;a href=&quot;https://github.com/zoonooz/ZFDragableModalTransition&quot;&gt;ZFDragableModalTransition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zoonooz/ZFDragableModalTransition/master/Screenshot/ss.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mcmheaderanimatedhttpsgithubcommathcarignanimcmheaderanimated&quot;&gt;&lt;a href=&quot;https://github.com/mathcarignani/MCMHeaderAnimated&quot;&gt;MCMHeaderAnimated&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mathcarignani/MCMHeaderAnimated/master/demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubberbandeffecthttpsgithubcomproduktrubberbandeffect&quot;&gt;&lt;a href=&quot;https://github.com/Produkt/RubberBandEffect&quot;&gt;RubberBandEffect&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Produkt/RubberBandEffect/master/Others/RubberBand_01.gif&quot; alt=&quot;rubber-band01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Produkt/RubberBandEffect/master/Others/RubberBand_02.gif&quot; alt=&quot;rubber-band02&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;easyanimationhttpsgithubcomicanzilbeasyanimation&quot;&gt;&lt;a href=&quot;https://github.com/icanzilb/EasyAnimation&quot;&gt;EasyAnimation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/icanzilb/EasyAnimation/master/etc/EA.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/icanzilb/EasyAnimation/master/etc/moveX.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/icanzilb/EasyAnimation/master/etc/corners.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/icanzilb/EasyAnimation/master/etc/spring.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/icanzilb/EasyAnimation/master/etc/chain.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mmtweenanimationhttpsgithubcomadad184mmtweenanimation&quot;&gt;&lt;a href=&quot;https://github.com/adad184/MMTweenAnimation&quot;&gt;MMTweenAnimation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/adad184/MMTweenAnimation/master/Images/demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gearrefreshcontrolhttpsgithubcomandreamazzgearrefreshcontrol&quot;&gt;&lt;a href=&quot;https://github.com/andreamazz/GearRefreshControl&quot;&gt;GearRefreshControl&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/GearRefreshControl/master/assets/screenshot.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dragdropcollectionviewhttpsgithubcomliornndragdropcollectionview&quot;&gt;&lt;a href=&quot;https://github.com/LiorNn/DragDropCollectionView&quot;&gt;DragDropCollectionView&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiorNn/DragDropCollectionView/master/demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;twitterbirdanimationhttpsgithubcomrounaktwitterbirdanimation&quot;&gt;&lt;a href=&quot;https://github.com/rounak/TwitterBirdAnimation&quot;&gt;TwitterBirdAnimation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://media.tumblr.com/10cc0ba92377a2cba9fb35c9943fd2ca/tumblr_inline_n6zpokNxpC1qh9cw7.gif&quot; alt=&quot;twitter bird animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;singlelineshakeanimationhttpsgithubcomhaaakonsinglelineshakeanimation&quot;&gt;&lt;a href=&quot;https://github.com/haaakon/SingleLineShakeAnimation&quot;&gt;SingleLineShakeAnimation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/haaakon/SingleLineShakeAnimation/master/example.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rqshinelabelhttpsgithubcomzipmerqshinelabel&quot;&gt;&lt;a href=&quot;https://github.com/zipme/RQShineLabel&quot;&gt;RQShineLabel&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zipme/RQShineLabel/master/Screenshots/rqshinelabel.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ltmorphinglabelhttpsgithubcomlexrusltmorphinglabel&quot;&gt;&lt;a href=&quot;https://github.com/lexrus/LTMorphingLabel&quot;&gt;LTMorphingLabel&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/219689/3491822/96bf5de6-059d-11e4-9826-a6f82025d1af.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/219689/3491838/ffc5aff2-059d-11e4-970c-6e2d7664785a.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/219689/3491840/173c2238-059e-11e4-9b33-dcd21edae9e2.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/219689/3491845/29bb0f8c-059e-11e4-9ef8-de56bec1baba.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/219689/3508789/31e9fafe-0690-11e4-9a76-ba3ef45eb53a.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/219689/3582586/4fb8c52e-0bfe-11e4-9b6f-f070f7f3ab55.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/219689/3594949/815cd3e8-0caa-11e4-9738-278a9c959478.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wzdraggableswitchheaderviewhttpsgithubcomwongzigiiwzdraggableswitchheaderview&quot;&gt;&lt;a href=&quot;https://github.com/wongzigii/WZDraggableSwitchHeaderView&quot;&gt;WZDraggableSwitchHeaderView&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wongzigii/WZDraggableSwitchHeaderView/master/GIF/WZAnimatingTransition.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;zlswipeableviewswifthttpsgithubcomzhxnlaizlswipeableviewswift&quot;&gt;&lt;a href=&quot;https://github.com/zhxnlai/ZLSwipeableViewSwift&quot;&gt;ZLSwipeableViewSwift&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableViewSwift/master/Previews/animation.gif&quot; alt=&quot;direction&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableViewSwift/master/Previews/swipe.gif&quot; alt=&quot;direction&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableViewSwift/master/Previews/direction.gif&quot; alt=&quot;direction&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableViewSwift/master/Previews/undo.gif&quot; alt=&quot;direction&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;zlswipeableviewhttpsgithubcomzhxnlaizlswipeableview&quot;&gt;&lt;a href=&quot;https://github.com/zhxnlai/ZLSwipeableView/&quot;&gt;ZLSwipeableView&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableView/master/Previews/swipe.gif&quot; alt=&quot;swipe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableView/master/Previews/swipeCancel.gif&quot; alt=&quot;cancel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableView/master/Previews/swipeLeft.gif&quot; alt=&quot;swipeLeft&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhxnlai/ZLSwipeableView/master/Previews/swipeLeftRight.gif&quot; alt=&quot;swipeLeftRight&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ckwavecollectionviewtransitionhttpsgithubcomcezarykopaczckwavecollectionviewtransition&quot;&gt;&lt;a href=&quot;https://github.com/CezaryKopacz/CKWaveCollectionViewTransition&quot;&gt;CKWaveCollectionViewTransition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/3o85xyoYepG177Bhte.gif&quot; alt=&quot;anim.gif&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;liquidfloatingactionbuttonhttpsgithubcomyoavltliquidfloatingactionbutton&quot;&gt;&lt;a href=&quot;https://github.com/yoavlt/LiquidFloatingActionButton&quot;&gt;LiquidFloatingActionButton&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yoavlt/LiquidFloatingActionButton/master/Demo/top.gif&quot; alt=&quot;anim.gif&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/yoavlt/LiquidFloatingActionButton/master/Demo/customizable.gif&quot; alt=&quot;anim.gif&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nvactivityindicatorviewhttpsgithubcomninjaproxnvactivityindicatorview&quot;&gt;&lt;a href=&quot;https://github.com/ninjaprox/NVActivityIndicatorView&quot;&gt;NVActivityIndicatorView&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ninjaprox/NVActivityIndicatorView/master/Demo.gif&quot; alt=&quot;anim.gif&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tksubmittransitionhttpsgithubcomentotsutksubmittransition&quot;&gt;&lt;a href=&quot;https://github.com/entotsu/TKSubmitTransition&quot;&gt;TKSubmitTransition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/entotsu/TKSubmitTransition/blob/master/demo.gif&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;http://download.jikexueyuan.com/detail/id/1301&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://download.jikexueyuan.com/File/image/e224fc4d0c362305fa498b371cfac4c9_318513_189_4c21143928442461801bae5ac596c.gif&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;animationshttpsgithubcomkittenyanganimations&quot;&gt;&lt;a href=&quot;https://github.com/KittenYang/Animations&quot;&gt;Animations&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/KittenYang/Animations/master/GooeySlideMenu.gif&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kdintroviewhttpsgithubcomlikedankdintroview&quot;&gt;&lt;a href=&quot;https://github.com/likedan/KDIntroView&quot;&gt;KDIntroView&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/likedan/KDIntroView/master/Imgs/showup.gif&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;razzledazzlehttpsgithubcomiftttrazzledazzle&quot;&gt;&lt;a href=&quot;https://github.com/IFTTT/RazzleDazzle&quot;&gt;RazzleDazzle&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/IFTTT/RazzleDazzle/master/Example/Docs/razzledazzle-demo.gif&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;presentationhttpsgithubcomhyperoslopresentation&quot;&gt;&lt;a href=&quot;https://github.com/hyperoslo/Presentation&quot;&gt;Presentation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hyperoslo/Presentation/master/Example/Parallax/Images/Parallax-v2.gif&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uicollectionview-reorderinghttpsgithubcomnshintiouicollectionview-reordering&quot;&gt;&lt;a href=&quot;https://github.com/nshintio/uicollectionview-reordering&quot;&gt;uicollectionview-reordering&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ee5e5999dea79c81a09416a51b1e6cec5de3a193/687474703a2f2f6e7368696e742e696f2f696d616765732f7569636f6c6c656374696f6e766965772d72656f72646572696e672f342e676966&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uber-video-welcomehttpsgithubcomchinsyouber-video-welcome&quot;&gt;&lt;a href=&quot;https://github.com/chinsyo/uber-video-welcome&quot;&gt;uber-video-welcome&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chinsyo/uber-video-welcome/master/uber-video-welcome.gif&quot; alt=&quot;Demo GIF Animation&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;liquidloaderhttpsgithubcomyoavltliquidloader&quot;&gt;&lt;a href=&quot;https://github.com/yoavlt/LiquidLoader&quot;&gt;LiquidLoader&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;GrowCircle&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/yoavlt/LiquidLoader/blob/master/Demo/grow-circle.gif?raw=true&quot; alt=&quot;GrowCircle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GrowLine&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/yoavlt/LiquidLoader/blob/master/Demo/grow-line.gif?raw=true&quot; alt=&quot;GrowLine&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dgelasticpulltorefreshhttpsgithubcomgontovnikdgelasticpulltorefresh&quot;&gt;&lt;a href=&quot;https://github.com/gontovnik/DGElasticPullToRefresh&quot;&gt;DGElasticPullToRefresh&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gontovnik/DGElasticPullToRefresh/master/DGElasticPullToRefreshPreview1.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/gontovnik/DGElasticPullToRefresh/master/DGElasticPullToRefreshPreview2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cardanimationhttpsgithubcomseedantecardanimation&quot;&gt;&lt;a href=&quot;https://github.com/seedante/CardAnimation&quot;&gt;CardAnimation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d13yacurqjgara.cloudfront.net/users/32399/screenshots/1265487/attachments/173545/secret-project-animation_2x.gif&quot; alt=&quot;Design from Dribble&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;acanimatedtextfieldhttpsgithubcomalexcatchacanimatedtextfield&quot;&gt;&lt;a href=&quot;https://github.com/AlexCatch/ACAnimatedTextField&quot;&gt;ACAnimatedTextField&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/AlexCatch/ACAnimatedTextField/master/misc/preview.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;instructionshttpsgithubcomephreadinstructions&quot;&gt;&lt;a href=&quot;https://github.com/ephread/Instructions&quot;&gt;Instructions&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JUlQH9F.gif&quot; alt=&quot;Instructions Demo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mntpulltoreacthttpsgithubcommentionappmntpulltoreact&quot;&gt;&lt;a href=&quot;https://github.com/mentionapp/mntpulltoreact&quot;&gt;mntpulltoreact&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mentionapp/mntpulltoreact/master/README/mention-example.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tkrubberindicatorhttpsgithubcomtbxarktkrubberindicator&quot;&gt;&lt;a href=&quot;https://github.com/TBXark/TKRubberIndicator&quot;&gt;TKRubberIndicator&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TBXark/TKRubberIndicator/master/TKRubberIndicator/rubberindicator.gif&quot; alt=&quot;Preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tyalertcontrollerhttpsgithubcom12207480tyalertcontroller&quot;&gt;&lt;a href=&quot;https://github.com/12207480/TYAlertController&quot;&gt;TYAlertController&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/12207480/TYAlertController/master/screenshot/TYAlertControllerDemo.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;yfstartviewhttpsgithubcomyeziaheheyfstartview&quot;&gt;&lt;a href=&quot;https://github.com/yeziahehe/YFStartView&quot;&gt;YFStartView&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewbuttom.gif&quot; alt=&quot;GIFImage&quot; /&gt;
&lt;img src=&quot;http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewcenter.gif&quot; alt=&quot;GIFImage&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ttgemojiratehttpsgithubcomzekunyanttgemojirate&quot;&gt;&lt;a href=&quot;https://github.com/zekunyan/TTGEmojiRate&quot;&gt;TTGEmojiRate&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGEmojiRate_screenshot2.gif&quot; alt=&quot;Screenshot&quot; /&gt;
&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGEmojiRate_IBExample.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;alertonboardinghttpsgithubcomphilippeboisneyalertonboarding&quot;&gt;&lt;a href=&quot;https://github.com/PhilippeBoisney/AlertOnboarding&quot;&gt;AlertOnboarding&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/PhilippeBoisney/AlertOnboarding/blob/master/screenshot.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;htytextfieldhttpsgithubcomhantonhtytextfield&quot;&gt;&lt;a href=&quot;https://github.com/hanton/HTYTextField&quot;&gt;HTYTextField&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/hanton/HTYTextField/blob/master/screenshot/HTYTextField.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mevhorizontalcontactshttpsgithubcommanuelescrigmevhorizontalcontacts&quot;&gt;&lt;a href=&quot;https://github.com/manuelescrig/MEVHorizontalContacts&quot;&gt;MEVHorizontalContacts&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1849990/15137846/645a0d18-168c-11e6-96e2-651d8f8de3b0.gif&quot; alt=&quot;MEVHorizontalContacts&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;preview-transitionhttpsgithubcomramotionpreview-transition&quot;&gt;&lt;a href=&quot;https://github.com/Ramotion/preview-transition&quot;&gt;preview-transition&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/Ramotion/preview-transition/blob/master/preview.gif&quot; alt=&quot;PreviewTransition&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;expanding-collectionhttpsgithubcomramotionexpanding-collection&quot;&gt;&lt;a href=&quot;https://github.com/Ramotion/expanding-collection&quot;&gt;expanding-collection&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/Ramotion/expanding-collection/blob/master/preview.gif&quot; alt=&quot;PreviewTransition&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tween-controllerhttpsgithubcomdaltonclaybrooktween-controller&quot;&gt;&lt;a href=&quot;https://github.com/daltonclaybrook/tween-controller&quot;&gt;tween-controller&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/daltonclaybrook/tween-controller/master/example.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mevfloatingbuttonhttpsgithubcommanuelescrigmevfloatingbutton&quot;&gt;&lt;a href=&quot;https://github.com/manuelescrig/MEVFloatingButton&quot;&gt;MEVFloatingButton&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1849990/13462466/db001be6-e087-11e5-92a1-79c8ecefb715.gif&quot; alt=&quot;MEVFloatingButton&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Jun 2016 17:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/12/ios_animation_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/12/ios_animation_introduction/</guid>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>Android 设计模式分析十一</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;1. 模式介绍&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;模式的定义&lt;/h3&gt;
&lt;p&gt;用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;模式的使用场景&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等，通过原型拷贝避免这些消耗；&lt;/li&gt;
  &lt;li&gt;通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式；&lt;/li&gt;
  &lt;li&gt;一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;uml&quot;&gt;2. UML类图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/android_introduction/android_prototype-uml.png&quot; alt=&quot;uml&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;角色介绍&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Client  :  客户端用户。&lt;/li&gt;
  &lt;li&gt;Prototype : 抽象类或者接口，声明具备clone能力。&lt;/li&gt;
  &lt;li&gt;ConcretePrototype : 具体的原型类.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;3. 模式的简单实现&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;简单实现的介绍&lt;/h3&gt;

&lt;p&gt;下面我们以简单的文档拷贝为例来演示一下简单的原型模式模式。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;实现源码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 文档类型, 扮演的是ConcretePrototype角色，而cloneable是代表prototype角色
 * 
 * @author mrsimple
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cloneable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 文本
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 图片名列表
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mImages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;----------- WordDocument构造函数 -----------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 克隆对象
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mImages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mImages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getImages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mImages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @param img
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mImages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 打印文档内容
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;----------- Word Content Start -----------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Text : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Images List: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mImages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image name : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;----------- Word Content End -----------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过WordDocument类模拟了word文档中的基本元素，即文字和图片。WordDocument的在该原型模式示例中扮演的角色为ConcretePrototype， 而Cloneable的角色则为Prototype。WordDocument实现了clone方法以实现对象克隆。下面我们看看Client端的使用 :&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;这是一篇文档&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;图片1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;图片2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;图片3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;这是修改过的Doc2文本&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;输出结果如下 :   &lt;br /&gt;
&lt;img src=&quot;/img/in-post/android_introduction/android_yx_result.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，doc2是通过originDoc.clone()创建的，并且doc2第一次输出的时候和originDoc输出是一样的。即doc2是originDoc的一份拷贝，他们的内容是一样的，而doc2修改了文本内容以后并不会影响originDoc的文本内容。需要注意的是通过clone拷贝对象的时候并不会执行构造函数！&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;浅拷贝和深拷贝&lt;/h3&gt;
&lt;p&gt;将main函数的内容修改为如下 :&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;这是一篇文档&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;图片1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;图片2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;图片3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;这是修改过的Doc2文本&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;哈哈.jpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;originDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出结果如下 :&lt;br /&gt;
&lt;img src=&quot;/img/in-post/android_introduction/android_yx_result-2.png&quot; alt=&quot;result&quot; /&gt;     &lt;br /&gt;
细心的朋友可能发现了，在doc2添加了一张名为”哈哈.jpg”的照片，但是却也显示在originDoc中？这是怎么回事呢？  其实学习过C++的朋友都知道，这是因为上文中WordDocument的clone方法中只是简单的进行浅拷贝，引用类型的新对象doc2的mImages只是单纯的指向了this.mImages引用，而并没有进行拷贝。doc2的mImages添加了新的图片，实际上也就是往originDoc里添加了新的图片，所以originDoc里面也有”哈哈.jpg” 。那如何解决这个问题呢？  那就是采用深拷贝，即在拷贝对象时，对于引用型的字段也要采用拷贝的形式，而不是单纯引用的形式。示例如下 :&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/**
     * 克隆对象
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WordDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//            doc.mImages = this.mImages;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mImages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mImages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如上代码所示，将doc.mImages指向this.mImages的一份拷贝， 而不是this.mImages本身，这样在doc2添加图片时并不会影响originDoc，如图所示 :    &lt;br /&gt;
&lt;img src=&quot;/img/in-post/android_introduction/android_yx_result-3.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;android&quot;&gt;Android源码中的模式实现&lt;/h2&gt;
&lt;p&gt;在Android源码中，我们以熟悉的Intent来分析源码中的原型模式。简单示例如下 :&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smsto:0800000123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shareIntent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_SENDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;shareIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sms_body&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The SMS text&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    
    
    &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shareIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果如下 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/android_introduction/android_sms.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，我们通过shareIntent.clone方法拷贝了一个对象intent, 然后执行startActivity(intent)， 随即就进入了短信页面，号码为0800000123,文本内容为The SMS text，即这些内容都与shareIntent一致。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Copy constructor.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mPackage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mCategories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mCategories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArraySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mCategories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mExtras&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mExtras&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mExtras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSourceBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSourceBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSourceBounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSelector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSelector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSelector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mClipData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mClipData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClipData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mClipData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，clone方法实际上在内部调用了new Intent(this); 这就和C++中的拷贝构造函数完全一致了，而且是深拷贝。由于该模式比较简单，就不做太多说明。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;4. 杂谈&lt;/h2&gt;

&lt;h3 id=&quot;section-9&quot;&gt;优点与缺点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;优点  &lt;br /&gt;
原型模式是在内存二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;缺点 &lt;br /&gt;
这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发当中应该注意这个潜在的问题。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 11 Jun 2016 04:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/11/android_prototype_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/11/android_prototype_introduction/</guid>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>Android 设计模式分析十</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;模式介绍&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;模式的定义&lt;/h3&gt;

&lt;p&gt;将抽象部分与实现部分分离，使它们都可以独立的变化。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;模式的使用场景&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果一个系统需要在构件的抽象化角色和具体化角色之间添加更多的灵活性，避免在两个层次之间建立静态的联系。&lt;/li&gt;
  &lt;li&gt;设计要求实现化角色的任何改变不应当影响客户端，或者实现化角色的改变对客户端是完全透明的。&lt;/li&gt;
  &lt;li&gt;需要跨越多个平台的图形和窗口系统上。&lt;/li&gt;
  &lt;li&gt;一个类存在两个独立变化的维度，且两个维度都需要进行扩展。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uml&quot;&gt;UML类图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/android_introduction/android_design_uml.png&quot; alt=&quot;uml&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;角色介绍&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。
修正抽象化(Refined Abstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。&lt;/li&gt;
  &lt;li&gt;实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。必须指出的是，这个接 口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。实现化角色应当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一层的操作。&lt;/li&gt;
  &lt;li&gt;具体实现化(ConcreteImplementor)角色：这个角色给出实现化角色接口的具体实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;模式的简单实现&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;介绍&lt;/h3&gt;

&lt;p&gt;其实Java的虚拟机就是一个很好的例子，在不同平台平台上，用不同的虚拟机进行实现，这样只需把Java程序编译成符合虚拟机规范的文件，且只用编译一次，便在不同平台上都能工作。 但是这样说比较抽象，用一个简单的例子来实现bridge模式。&lt;/p&gt;

&lt;p&gt;编写一个程序，使用两个绘图的程序的其中一个来绘制矩形或者原型，同时，在实例化矩形的时候，它要知道使用绘图程序1（DP1）还是绘图程序2（DP2）。&lt;/p&gt;

&lt;p&gt;(ps:假设dp1和dp2的绘制方式不一样，它们是用不同方式进行绘制，示例代码，不讨论过多细节)&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;实现源码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;err&quot;&gt;首先是两个绘图程序&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//具体的绘图程序类dp1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DP1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw_1_Rantanle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;使用DP1的程序画矩形&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw_1_Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;使用DP1的程序画圆形&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//具体的绘图程序类dp2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DP2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawRantanle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;使用DP2的程序画矩形&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;使用DP2的程序画圆形&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;接着​抽象的形状&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;和两个派生类：矩形&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rantanle&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;和圆形&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//抽象化角色Abstraction&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//持有实现的角色Implementor(作图类)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDrawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myDrawing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//保护方法drawRectangle&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawRectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//this.impl.implmentation()&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myDrawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawRantangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//保护方法drawCircle&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//this.impl.implmentation()&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myDrawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//修正抽象化角色Refined Abstraction(矩形)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rantangle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rantangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;drawRectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//修正抽象化角色Refined Abstraction(圆形)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;最后，我们的实现绘图的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;和分别实现&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V1Drawing&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;和&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V2Drawing&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//实现化角色Implementor&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//implmentation两个方法，画圆和画矩形&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drawing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawRantangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//具体实现化逻辑ConcreteImplementor&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//实现了接口方法，使用DP1进行绘图&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;V1Drawing&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
	&lt;span class=&quot;n&quot;&gt;DP1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V1Drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawRantangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;draw_1_Rantanle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;draw_1_Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;			
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//具体实现化逻辑ConcreteImplementor&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//实现了接口方法，使用DP2进行绘图&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;V2Drawing&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DP2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V2Drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawRantangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawRantanle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;​在这个示例中，图形Shape类有两种类型，圆形和矩形，为了使用不同的绘图程序绘制图形，把实现的部分进行了分离，构成了Drawing类层次结构，包括V1Drawing和V2Drawing。在具体实现类中，V1Drawing控制着DP1程序进行绘图，V2Drawing控制着DP2程序进行绘图，以及保护的方法drawRantangle,drawCircle(Shape类中) 。&lt;/p&gt;

&lt;h2 id=&quot;android&quot;&gt;Android源码中的模式实现&lt;/h2&gt;

&lt;p&gt;在Android中也运用到了Bridge模式，我们使用很多的ListView和BaseAdpater其实就是Bridge模式的运行，很多人会问这个不是Adapter模式，接下来根据源码来分析。&lt;/p&gt;

&lt;p&gt;首先ListAdapter.java：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListAdapter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//继承自Adapter，扩展了自己的两个实现方法&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;areAllItemsEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里先来看一下父类AdapterView。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;//这里需要一个泛型的Adapter&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接着来看ListView的父类AbsListView，继承自AdapterView&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbsListView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdapterView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
    &lt;span class=&quot;c1&quot;&gt;//继承自AdapterView,并且指明了T为ListAdapter&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * The adapter containing the data to be displayed by this view
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ListAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;//代码省略&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这里实现了setAdapter的方法，实例了对实现化对象的引用&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//这的adapter是从子类传入上来，也就是listview，拿到了具体实现化的对象&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mAdapterHasStableIds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasStableIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mChoiceMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHOICE_MODE_NONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAdapterHasStableIds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;mCheckedIdStates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mCheckedIdStates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongSparseArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCheckStates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mCheckStates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCheckedIdStates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mCheckedIdStates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;大家都知道，构建一个listview，adapter中最重要的两个方法，getCount()告知数量，getview()告知具体的view类型，接下来看看AbsListView作为一个视图的集合是如何来根据实现化对象adapter来实现的具体的view呢？&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAttachedToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onAttachedToWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
            &lt;span class=&quot;c1&quot;&gt;//省略代码，&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//这里在加入window的时候，getCount()确定了集合的个数&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mDataChanged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mOldItemCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mItemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mItemCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接着来看&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;obtainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isScrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//代码省略&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//这里根据位置显示具体的view,return的child是从持有的实现对象mAdapter里面的具体实现的&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//方法getview来得到的。&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//代码省略&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来在ListView中，onMeasure调用了obtainView来确定宽高，在扩展自己的方法来排列这些view。知道了&lt;/p&gt;

&lt;p&gt;这些以后，我们来画一个简易的UML图来看下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/android_introduction/android_design_list.png&quot; alt=&quot;uml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对比下GOF的上图，是不是发现很像呢？实际上最开始研究Adapter模式的时候,越看越不对啊，于是整理结构，画了UML发现这更像是一个bridge模式，那时候对设计模式也是模模糊糊的，于是静下来研究。抽象化的角色一个视图的集合AdapterView，它扩展了AbsListView，AbsSpinner，接下来他们分别扩展了ListView，GridView，Spinner,Gallery，用不同方式来展现这些ItemViews，我们继续扩展类似ListView的PulltoRefreshView等等。而实现化角色Adapter扩展了ListAdpater,SpinnerAdapter，接着具体的实现化角色BaseAdapter实现了他们，我们通过继承BaseAdapter又实现了我们各式各样的ItemView。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;杂谈&lt;/h2&gt;

&lt;p&gt;这里就是Android工程师的牛X之处了，用一个bridge和adapter来解决了一个大的难题。试想一下，视图的排列方式是无穷尽，是人们每个人开发的视图也是无穷尽的。如果你正常开发，你需要多少类来完成呢？而Android把最常用用的展现方式全部都封装了出来，而在实现角色通过Adapter模式来应变无穷无尽的视图需要。抽象化了一个容器使用适配器来给容器里面添加视图，容器的形状(或理解为展现的方式)以及怎么样来绘制容器内的视图，你都可以独自的变化，双双不会干扰，真正的脱耦，就要最开始说的那样：“将抽象部分与实现部分分离，使它们都可以独立的变化。”&lt;/p&gt;

&lt;p&gt;从上面的两个案例，我们可以看出，我们在两个解决方案中都用到bridge和adapter模式，那是因为我们必须使用给定的绘图程序(adapter适配器)，绘图程序(adapter适配器)有已经存在的接口必须要遵循，因此需要使用Adapter进行适配，然后才能用同样的方式处理他们,他们经常一起使用，并且相似，但是Adapter并不是Bridge的一部分。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;优点与缺点&lt;/h3&gt;

&lt;p&gt;实现与使用实现的对象解耦，提供了可扩展性，客户对象无需担心操作的实现问题。  如果你采用了bridge模式，在处理新的实现将会非常容易。你只需定义一个新的具体实现类，并且实现它就好了，不需要修改任何其他的东西。但是如果你出现了一个新的具体情况，需要对实现进行修改时，就得先修改抽象的接口，再对其派生类进行修改，但是这种修改只会存在于局部,并且这种修改将变化的英雄控制在局部，并且降低了出现副作用的风险，而且类之间的关系十分清晰，如何实现一目了然。&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 19:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/10/android_bridging_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/10/android_bridging_introduction/</guid>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>Android 设计模式分析九</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;1. 模式介绍&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;模式的定义&lt;/h3&gt;
&lt;p&gt;将一个请求封装成一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;模式的使用场景&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。&lt;/li&gt;
  &lt;li&gt;系统需要在不同的时间指定请求、将请求排队和执行请求。&lt;/li&gt;
  &lt;li&gt;系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。&lt;/li&gt;
  &lt;li&gt;系统需要将一组操作组合在一起，即支持宏命令。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;uml&quot;&gt;2. UML类图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/android_introduction/android_lijunhuayc_uml.png&quot; alt=&quot;UML类图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;角色介绍&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;命令角色（Command）：定义命令的接口，声明具体命令类需要执行的方法。这是一个抽象角色。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;具体命令角色（ConcreteCommand）：命令接口的具体实现对象，通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调用者角色（Invoker）：负责调用命令对象执行请求，通常会持有命令对象（可以持有多个命令对象）。Invoker是Client真正触发命令并要求命令执行相应操作的地方（使用命令对象的入口）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接受者角色（Receiver）：Receiver是真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户角色（Client）：Client可以创建具体的命令对象，并且设置命令对象的接收者。Tips：不能把Clinet理解为我们平常说的客户端，这里的Client是一个组装命令对象和接受者对象的角色，或者你把它理解为一个装配者。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;3. 模式的简单实现&lt;/h2&gt;
&lt;p&gt;###  简单实现的介绍
命令模式其实就是对命令进行封装，将命令请求者和命令执行者的责任分离开来实现松耦合。
这里我们通过一个简单的实例来剖析一下命令模式：命令接收者ReceiverRole拥有一个PeopleBean类型成员，通过Invoker发出不同的命令来修改PeopleBean的相对应的属性，具体命令实现类ConcreteCommandImpl1执行修改年龄命令，ConcreteCommandImpl2执行修改姓名的命令等等，ClientRole负责组装各个部分。
例子代码如下（resource目录下也可以查看）。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;实现源码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 命令接口    [命令角色]
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ConcreteCommandImpl1.java类.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 更新年龄的命令类  [ 具体命令角色 ]
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcreteCommandImpl1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcreteCommandImpl1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;receiverRole1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
    	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;cm&quot;&gt;/*
    		 * 可以加入命令排队等等，未执行的命令支持redo操作
    		 */&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opActionUpdateAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//执行具体的命令操作&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollBackAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//执行具体的撤销回滚操作&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;//在命令执行前可以修改命令的执行&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ConcreteCommandImpl2.java类.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 更新姓名的命令类[具体命令角色]
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcreteCommandImpl2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcreteCommandImpl2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;receiverRole1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
    	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;cm&quot;&gt;/*
    		 * 可以加入命令排队等等，未执行的命令支持redo操作
    		 */&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opActionUpdateName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lijunhuayc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//执行具体的命令操作&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollBackName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//执行具体的撤销回滚操作&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;//在命令执行前可以修改命令的执行&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;InvokerRole.java.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 命令调用[调用者角色]
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvokerRole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//持有多个命令对象[实际的情况也可能是一个命令对象的集合来保存命令对象]&lt;/span&gt;
    	
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setCommand1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setCommand2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
    	&lt;span class=&quot;cm&quot;&gt;/**
    	 * 执行正常命令，1执行回滚命令
    	 */&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;//可以根据具体情况选择执行某些命令&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;undo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;undo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ReceiverRole.java.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 命令的具体执行类[接收者角色], 命令接收者可以是任意的类，只要实现了命令要求实现的相应功能即可。
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReceiverRole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;//具体命令操作的缓存栈，用于回滚。这里为了方便就用一个PeopleBean来代替    &lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;     	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//初始化年龄为-1，姓名为NULL&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;cm&quot;&gt;/**
	 * 具体操作方法[修改年龄和姓名]
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opActionUpdateAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;执行命令前：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;执行命令后：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//修改姓名&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opActionUpdateName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;执行命令前：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;执行命令后：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;cm&quot;&gt;/**
	 * 回滚操作，用于撤销opAction执行的改变
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollBackAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;命令回滚后：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollBackName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;命令回滚后：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;PeopleBean.java&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * @Desc: 辅助类，作为接收者Receiver的成员，包含两个属性，用来观察命令的执行情况
     * @author ljh
     * @date 2015-3-16 上午11:29:11
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeopleBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//年龄&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//姓名&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;cm&quot;&gt;/**
    	 * @return 返回一个PeopleBean的克隆对象
    	 */&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 【年龄：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\t姓名：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;】&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// setter and getter &lt;/span&gt;
    	
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ClientRole.java&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 命令对象和接受者对象的组装类[客户角色].
     * 我这把类名定义成ClientRole更方便读者理解这只是命令模式中的一个客户角色，而不是我们常规意义上说的客户端
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientRole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;cm&quot;&gt;/**
    	 * 组装操作
    	 */&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assembleAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;//创建一个命令接收者&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    			&lt;span class=&quot;c1&quot;&gt;//创建一个命令的具体实现对象，并指定命令接收者&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcreteCommandImpl1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;           		    &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcreteCommandImpl2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiverRole1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    		&lt;span class=&quot;n&quot;&gt;InvokerRole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invokerRole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InvokerRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//创建一个命令调用者&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;invokerRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCommand1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//为调用者指定命令对象1&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;invokerRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCommand2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//为调用者指定命令对象2&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;invokerRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//发起调用命令请求&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;invokerRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//发起调用命令请求&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;测试类.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;ClientRole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assembleAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/android_introduction/android_lijunhuayc_result.png&quot; alt=&quot;运行结果图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。&lt;/li&gt;
  &lt;li&gt;命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。&lt;/li&gt;
  &lt;li&gt;命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。&lt;/li&gt;
  &lt;li&gt;命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android&quot;&gt;Android源码中的模式实现&lt;/h2&gt;
&lt;p&gt;Command接口中定义了一个execute方法，客户端通过Invoker调用命令操作再来调用Recriver执行命令；把对Receiver的操作请求封装在具体的命令中，使得命令发起者和命令接收者解耦。
以Android中大家常见的Runnable为例：客户端只需要new Thread(new Runnable(){}).start()就开始执行一系列相关的请求，这些请求大部分都是实现Runnable接口的匿名类。
【O_o 模式就在我们身边~】&lt;/p&gt;

&lt;p&gt;命令接口Runnable接口定义如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package java.lang;
/**
 * Represents a command that can be executed. Often used to run code in a
 * different {@link Thread}.
 */
public interface Runnable {

    /**
     * Starts executing the active part of the class&#39; code. This method is
     * called when a thread is started that has been created with a class which
     * implements {@code Runnable}.
     */
    public void run();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;调用者Thread源码如下（省略部分代码）：
Tips：命令模式在这里本来不需要继承Runnable接口，但为了方便性等，继承了Runnable接口实现了run方法，这个run是Thread自身的运行run的方法，而不是命令Runnable的run。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Thread implements Runnable {
    //省略部分无关代码...
    /* some of these are accessed directly by the VM; do not rename them */
    volatile VMThread vmThread;
    volatile ThreadGroup group;
    volatile boolean daemon;
    volatile String name;
    volatile int priority;
    volatile long stackSize;
    Runnable target;
    private static int count = 0;
    
    public synchronized void start() {
        if (hasBeenStarted) {
            throw new IllegalThreadStateException(&quot;Thread already started.&quot;); // TODO Externalize?
        }

        hasBeenStarted = true;

        VMThread.create(this, stackSize);
    }
    //省略部分代码...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面可以看到执行start()方法的时候实际执行了VMThread.create(this, stackSize)方法；create是VMThread的本地方法，其JNI实现在 android/dalvik/vm/native/java_lang_VMThread.cpp 中的 Dalvik_java_lang_VMThread_create方法，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void Dalvik_java_lang_VMThread_create(const u4* args, JValue* pResult)
{
    Object* threadObj = (Object*) args[0];
    s8 stackSize = GET_ARG_LONG(args, 1);

    /* copying collector will pin threadObj for us since it was an argument */
    dvmCreateInterpThread(threadObj, (int) stackSize);
    RETURN_VOID();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而dvmCreateInterpThread的实现在Thread.app中，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool dvmCreateInterpThread(Object* threadObj, int reqStackSize){
    Thread* self = dvmThreadSelf();
    
    Thread* newThread = allocThread(stackSize); 
    newThread-&amp;gt;threadObj = threadObj;
    
    Object* vmThreadObj = dvmAllocObject(gDvm.classJavaLangVMThread, ALLOC_DEFAULT);
    dvmSetFieldInt(vmThreadObj, gDvm.offJavaLangVMThread_vmData, (u4)newThread);
    dvmSetFieldObject(threadObj, gDvm.offJavaLangThread_vmThread, vmThreadObj);
    
    pthread_t threadHandle;
    int cc = pthread_create(&amp;amp;threadHandle, &amp;amp;threadAttr, interpThreadStart, newThread);

    dvmLockThreadList(self);

    assert(newThread-&amp;gt;status == THREAD_STARTING);
    newThread-&amp;gt;status = THREAD_VMWAIT;
    pthread_cond_broadcast(&amp;amp;gDvm.threadStartCond);

    dvmUnlockThreadList();
    
}

static Thread* allocThread(int interpStackSize)
{
    Thread* thread;
    thread = (Thread*) calloc(1, sizeof(Thread));
    
    thread-&amp;gt;status = THREAD_INITIALIZING;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里是底层代码，简单介绍下就行了：
第4行通过调用 allocThread 创建一个名为newThread的dalvik Thread并设置一些属性，第5行设置其成员变量threadObj为传入的Android Thread，这样dalvik Thread就与Android Thread对象关联起来了；第7行然后创建一个名为vmThreadObj的VMThread对象，设置其成员变量vmData为前面创建的newThread，设置 Android Thread threadObj的成员变量vmThread为这个vmThreadObj，这样Android Thread通过VMThread的成员变量vmData就和dalvik Thread关联起来了。&lt;/p&gt;

&lt;p&gt;接下来在12行通过pthread_create创建pthread线程，并让这个线程start，这样就会进入该线程的thread entry运行，下来我们来看新线程的thread entry方法 interpThreadStart，同样只列出关键的地方：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//pthread entry function for threads started from interpreted code.
static void* interpThreadStart(void* arg){
    Thread* self = (Thread*) arg;
    std::string threadName(dvmGetThreadName(self));
    setThreadName(threadName.c_str());

    //Finish initializing the Thread struct.
    dvmLockThreadList(self);
    prepareThread(self);

    while (self-&amp;gt;status != THREAD_VMWAIT)
        pthread_cond_wait(&amp;amp;gDvm.threadStartCond, &amp;amp;gDvm.threadListLock);

    dvmUnlockThreadList();

    /*
     * Add a JNI context.
     */
    self-&amp;gt;jniEnv = dvmCreateJNIEnv(self);

    //修改状态为THREAD_RUNNING
    dvmChangeStatus(self, THREAD_RUNNING);
    
    //执行run方法
    Method* run = self-&amp;gt;threadObj-&amp;gt;clazz-&amp;gt;vtable[gDvm.voffJavaLangThread_run];

    JValue unused;
    ALOGV(&quot;threadid=%d: calling run()&quot;, self-&amp;gt;threadId);
    assert(strcmp(run-&amp;gt;name, &quot;run&quot;) == 0);
    dvmCallMethod(self, run, self-&amp;gt;threadObj, &amp;amp;unused);
    ALOGV(&quot;threadid=%d: exiting&quot;, self-&amp;gt;threadId);
    
    //移出线程并释放资源
    dvmDetachCurrentThread();
    return NULL;
}

//Finish initialization of a Thread struct.
static bool prepareThread(Thread* thread){
    assignThreadId(thread);
    thread-&amp;gt;handle = pthread_self();
    thread-&amp;gt;systemTid = dvmGetSysThreadId();
    setThreadSelf(thread);
    return true;
}

//Explore our sense of self.  Stuffs the thread pointer into TLS.
static void setThreadSelf(Thread* thread){
    int cc;
    cc = pthread_setspecific(gDvm.pthreadKeySelf, thread);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在新线程的interpThreadStart方法中，首先设置线程的名字，然后调用prepareThread设置线程id以及其它一些属性，其中调用了setThreadSelf将新dalvik Thread自身保存在TLS中，这样之后就能通过dvmThreadSelf方法从TLS中获取它。然后在29行处修改状态为THREAD_RUNNING，并在36行调用对应Android Thread的run()方法，其中调用了Runnable的run方法，运行我们自己的代码。
绕这么深才执行到我们的run方法，累不累？ v_v&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /**
     * Calls the &amp;lt;code&amp;gt;run()&amp;lt;/code&amp;gt; method of the Runnable object the receiver
     * holds. If no Runnable is set, does nothing.
     * @see Thread#start
     */
    public void run() {
        if (target != null) {
            target.run();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到此我们已经完成一次命令调用，至于底层run调用完毕后续执行代码，读者可以自行跟进看看~~~&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;4. 杂谈&lt;/h2&gt;

&lt;h3 id=&quot;section-8&quot;&gt;优点&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;降低对象之间的耦合度。&lt;/li&gt;
  &lt;li&gt;新的命令可以很容易地加入到系统中。&lt;/li&gt;
  &lt;li&gt;可以比较容易地设计一个组合命令。&lt;/li&gt;
  &lt;li&gt;调用同一方法实现不同的功能&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-9&quot;&gt;缺点&lt;/h3&gt;

&lt;p&gt;使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。     &lt;br /&gt;
比如上面的PeopleBean的属性增加，Receiver针对PeopleBean一个属性一个执行方法，一个Command的实现可以调用Receiver的一个执行方法，由此得需要设计多少个具体命令类呀！！&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 17:30:00 +0800</pubDate>
        <link>http://DavidWangTM.github.io/2016/06/09/android_command_introduction/</link>
        <guid isPermaLink="true">http://DavidWangTM.github.io/2016/06/09/android_command_introduction/</guid>
        
        <category>Android</category>
        
        
      </item>
    
  </channel>
</rss>
